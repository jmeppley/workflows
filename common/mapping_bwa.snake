from edl import __version__ as PYMG_VERSION
SAMTOOLS_VERSION = get_version('samtools', lines=0)
BWA_VERSION = \
        get_version('bwa', 
                    version_flag="", 
                    regular_expression=re.compile(r'Version:\s*(\S[^\n\r]+\S)'))
from python.common import apply_defaults
#from snakemake.utils import update_config
apply_defaults(config, {'bwa': {'threads': 15},
                       'samtools': {'threads': 10, 'ram': '10G'},
                      })
config['cov_col'] = 'MeanCov'
config['read_col'] = 'ReadCount'
config['contig_col'] = 'Contig'
from python.assembly import get_coverage_stats
from python.samples import get_sample_reads_for_mapping

#######
# map reads to contigs with BWA:
#  4 rules

rule index_contigs:
    """ prepare contigs for mapping with BWA """
    input:
        "{contigs}.fasta"
    output:
        "mapping/{contigs}.index.bwa.bwt"
    log:
        "logs/bwa_index.{contigs}.log"
    benchmark:
        "benchmarks/bwa_pre_index.{contigs}.time"
    version: BWA_VERSION
    shell:
        "bwa index -p mapping/{wildcards.contigs}.index.bwa {input} > {log} 2>&1 "

rule map_sample_reads:
    """
    map cleaned reads onto contigs
    """
    input:
        "mapping/{contigs}.index.bwa.bwt",
        # prefer the raw reads, but cleaned are OK
        lambda w: get_sample_reads_for_mapping(w, config)
    output:
        temp("mapping/{sample}.reads.vs.{contigs}.sam")
    log:
        "logs/{sample}.vs.{contigs}.bwa_mem.log"
    benchmark:
        "benchmarks/{sample}.vs.{contigs}.bwa_mem.time"
    version: BWA_VERSION
    threads: config['bwa']['threads']
    shell:
        "bwa mem -p -t {threads} \
          mapping/{wildcards.contigs}.index.bwa {input[1]} \
            2> {log} \
            > {output}"

rule sam_to_bam:
    """ convert to BAM and:
     * sort by contig
     * keep only the primary alignments
    """
    input: "{root}.sam"
    output: "{root}.bam"
    benchmark: "benchmarks/{root}.bwa_sam_bam.time"
    threads: config['samtools']['threads']
    params:
        ram=config['samtools']['ram']
    version: SAMTOOLS_VERSION
    shell:
        "samtools view -F 2304 -b {input} \
        | samtools sort -l 5 -@ {threads} -m {params.ram} - \
        > {output}"

rule index_bam:
    input: "{root}.bam"
    output: "{root}.bam.bai"
    benchmark: "benchmarks/{root}.bwa_index_bam.time"
    version: SAMTOOLS_VERSION
    shell:
        "samtools index {input}"

rule mapped_read_counts:
    """ 
    Count number of reads mapped to each contig from a sample. 
    
    This just pulls out the refernce column (3) from the SAM output
    and uses uniq -c to get a count.
    """
    input:
        "mapping/{sample}.vs.{contigs}.bam.bai"
    output:
        "mapping/{sample}.vs.{contigs}.read_counts"
    benchmark:
        "benchmarks/bwa_count_reads.{sample}.{contigs}.time"
    version:
        get_version('samtools', lines=0)
    params:
        input="mapping/{sample}.vs.{contigs}.bam"
    shell:
        "samtools view -F 2304 {params.input} \
         | cut -f 3 \
         | uniq -c \
         > {output}"

rule mapped_read_depths:
    """
    Get read depth at each base in each contig. This is needed for
    coverage calculation later.
    """
    input:
        "mapping/{sample}.vs.{contigs}.bam.bai"
    output:
        "mapping/{sample}.vs.{contigs}.depths"
    benchmark:
        "benchmarks/bwa_get_depths.{sample}.{contigs}.time"
    version:
        get_version('samtools', lines=0)
    params:
        input="mapping/{sample}.vs.{contigs}.bam"
    shell:
        "samtools depth {params.input} > {output}"

rule contig_coverage_table:
    """
    Use depths and read counts to build table of coverage stats per contig
    """
    input:
        "mapping/{sample}.reads.vs.{contigs}.depths",
        "{contigs}.fasta",
        "mapping/{sample}.reads.vs.{contigs}.read_counts",
    output:
        temp("{contigs}.coverages.{sample}.txt"),
    benchmark:
        "benchmarks/contig.stats.{sample}.{contigs}.time"
    run:
        print("getting_coverage_stats:")
        get_coverage_stats(*list(input), get_file_name(output))

