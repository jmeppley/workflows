"""
The idea here is that we have many short chains of rules that 
recur in many places and can build up self explanatory file names

BUT...

Often when we combine them, trying to encode the full workflow in filenames
quickly becomes impractical. 

If we use a symblic link, though, the output of one set of rules with a complicated name, can also be the simply named input of another set of rules.

Another use if for when the input file is in another part of the file system. We can link it to a simply named file to start the workflow.

We can also concat multiple files into one here by giving list of files
"""

def get_transition_command(wildcards):
    """ choose 'ln -s' for single files, cat for multiple. Also use abs paths """
    input_files = config['transitions'][wildcards.transition_file_name]
    if isinstance(input_files, str):
        input_file = input_files
        # Single input file, just link it
        return "ln -s $(realpath --relative-to=$(dirname {}) {})".format(
            wildcards.transition_file_name,
            os.path.abspath(input_file)
        )
    # otherwise, we have a list of files to concatenate
    return "cat {} >".format(" ".join(os.path.abspath(f) for f in input_files))

# To prevent transition rule from matchin every file on earth:
#  dynamically generate overly specific regex constraint that lists all file names
pattern = "(" + "|".join(config.get('transitions',{}).keys()) + ")"
wildcard_constraints:
    transition_file_name=pattern

# transition rule will only match one of the configured files
rule transition_link_or_cat:
    """ Creates a symbolic link to or concatenates files from a config mapping """
    input: lambda w: config['transitions'][w.transition_file_name]
    output: "{transition_file_name}"
    params:
        command = get_transition_command,
    shell: "rm -f {output} && {params.command} {output}"

