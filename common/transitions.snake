"""
The idea here is that we have many short chains of rules that 
recur in many places and can build up self explanatory file names

BUT...

Often when we combine them, trying to encode the full workflow in filenames
quickly becomes impractical. 

If we use a symblic link, though, the output of one set of rules with a complicated name, can also be the simply named input of another set of rules.

Another use if for when the input file is in another part of the file system. We can link it to a simply named file to start the workflow.

We can also concat multiple files into one here by giving list of files
"""
logger.debug("BUILDING TRANSITIONS")
from jme.dynamic_remote_snake.remote import remote_wrapper, get_dl_snakefile
from jme.stagecache.util import URL_REXP

# To prevent trying to copy or link from a file to itself
#  remove redundant transistions here (prefilter URLs so we don't trip os.path)
#  also pass through remote wrapper to pick up remote files
logger.debug(config.setdefault('transitions', {}))
transitions = {s:remote_wrapper(t, config) \
                   for s,t in config['transitions'].items() \
                   if URL_REXP.search(s) is not None \
                   or os.path.abspath(s) != os.path.abspath(t)}

logger.debug(transitions)
config['transitions'] = transitions

def get_link_or_cat_command(wildcards):
    """ choose 'ln -s' for single files, cat for multiple. Also use abs paths """
    input_files = transitions[wildcards.transition_file_name]
    if isinstance(input_files, str):
        # Single input file, just link it
        input_file = input_files
        # make link relative so that it is protable
        return "ln -s $(realpath --relative-to=$(dirname {}) {})".format(
            wildcards.transition_file_name,
            os.path.abspath(input_file)
        )
    # otherwise, we have a list of files to concatenate
    return "cat {} >".format(" ".join(os.path.abspath(f) for f in input_files))


# To prevent transition rule from matchin every file on earth:
#  dynamically generate overly specific regex constraint that lists all file names
pattern = "(" + "|".join(transitions.keys()) + ")"
wildcard_constraints:
    transition_file_name=pattern

logger.debug("Dynamic Remote Snakefile: " + get_dl_snakefile())

include: get_dl_snakefile()
#include: '/home/jmeppley/work/dynamic_remote_snake/download.snake'

# transition rule will only match one of the configured files
localrules: transition_link_or_cat

rule transition_link_or_cat:
    """ Creates a symbolic link to or concatenates files from a config mapping """
    input: lambda w: transitions[w.transition_file_name]
    output: "{transition_file_name}"
    params:
        command = get_link_or_cat_command,
    shell: "rm -f {output} && {params.command} {output}"
