"""
Collection of rules from setting up AnVio profiles
"""

import re
include: "anvio.contigs.snake"

# how recent is this anvio?
v1,v2,v3 = re.search(r'^(\d+)(?:\.(\d+))?(?:\.(\d+))?',
                     config['anvio_version']).groups()
# anvi-merge takes PROFILE.db after 2.1.0 RUNINFO.cp before
logger.debug("CHecking to see if anvio version is better than 2.1.0. "
             "{}:{},{},{}".format(config['anvio_version'],v1,v2,v3))
anvi_ver_gt_210 = ( v1 > '2' ) \
                  or ( v1 == '2' and v2 > '1') \
                  or ( v1 == '2' and v2 == '1' and v3>='1')
logger.debug("Anvio version {} is{} newer than 2.1.0"\
                            .format(config['anvio_version'],
                                    "" if anvi_ver_gt_210 else " not"))

samples_name = config['sample_data'].setdefault('name','all')
config.setdefault('sample_tree',{})
config['sample_tree'].setdefault('distance_metrics',['euclidean',])
config['sample_tree'].setdefault('coverage_metrics',\
                                 ['mean_coverage_Q2Q3_contigs'])

config['merged_samples_dir'] = "anvio/samples-{}-merged"\
                                    .format(samples_name)
config['merged_samples_status'] = "anvio/status/samples-{}-merged"\
                                    .format(samples_name)
config.setdefault('outputs',set()).add(config['merged_samples_status'])

# import mapping rules and start from filtered contigs
include: "../common/mapping_bwa.snake"
config.setdefault('transitions',{})['contigs.fasta'] = 'anvio/contigs.fa'


# get list of assembled samples
sample_list = sorted([s for s in config['sample_data'].keys() \
                                if 'clean' in config['sample_data'][s]])
rule anvio_profile:
    input:
        "anvio/status/contigs-db",
        "mapping/{sample}.reads.vs.contigs.bam.bai"
    output:
        #"anvio/profile-{sample}/RUNINFO.cp"
        "anvio/status/profile-{sample}"
    log:
        "logs/anvio-profile-{sample}"
    benchmark:
        "benchmarks/anvio-profile-{sample}.time"
    params:
        bam=lambda w: "mapping/{sample}.reads.vs.contigs.bam".format(sample=w.sample),
        min_len=config.get("min_contig_length",2500)
    version:
        config['anvio_version']
    threads:
        config.get('threads',{}).get('anvi-profile',5)
    shell:
        """{config[anvio_prefix]}
           rm -rf anvio/profile-{wildcards.sample}
           anvi-profile -i {params.bam} -c anvio/contigs.db -S {wildcards.sample} \
            -o anvio/profile-{wildcards.sample} \
            --min-contig-length {params.min_len} > {log} 2>&1
           touch {output}"""

rule anvio_merge_profiles:
    """ Merge all the AnVio profiles """
    input:
        contig_status="anvio/status/contigs-db",
        profiles=lambda w: expand("anvio/status/profile-{sample}",
                            sample=sample_list),
    output:
        config['merged_samples_status']
    log:
        "logs/anvio-merged"
    benchmark:
        "benchmarks/anvio.merge.time"
    version:
        config['anvio_version']
    params:
        profiles=lambda w: expand("anvio/profile-{sample}/{filename}",
                            filename="PROFILE.db" if anvi_ver_gt_210 \
                                        else "RUNINFO.cp",
                            sample=sample_list),
        cluster="" \
            if not config.get('skip_contig_clustering', False) \
            else "--skip-hierarchical-clustering --skip-concoct-binning"
    shell:
        """{config[anvio_prefix]}
           rm -rf {config[merged_samples_dir]}
           anvi-merge {params.profiles} -c anvio/contigs.db \
                -o {config[merged_samples_dir]} {params.cluster} > {log} 2>&1 
           touch {output}"""

