"""
Rules for getting contigs ready for AnVio. Includes gene calls, hmm processing, and taxon assignments.

Outputs are empty status files because anvio tends to re-use files because they are dbs that get updated as you go. 
"""

if 'anvio_env' not in config:
    config['anvio_prefix']=""
else:
    config['anvio_prefix'] = "source activate {}\n".format(config['anvio_env'])

config['anvio_version'] = \
        get_version("anvi-profile",
                    cmd_prefix=config['anvio_prefix'],
                    regular_expression=r'Anvi\'?o\s+[Vv]ersion.+:\s+(\S.*)')

# use centrifuge if configured
centrifuge = 'centrifuge' in config
if not centrifuge:
    # otherwise try using configured tax db
    dbtax = 'dbs' in config
else:
    dbtax = False


for genome_name in config.get('genomes', ['']):
    if genome_name=='':
        contigs = 'contigs'
    else:
        contigs = 'contigs-' + genome_name

    if centrifuge or dbtax:
        # add to outputs if either is configured
        config.setdefault('outputs',set()).add("anvio/status/{contigs}-tax"\
                                                .format(contigs=contigs))

    config.setdefault('outputs',set()).add("anvio/status/{contigs}-hmms"\
                                                .format(contigs=contigs))

    if config.get('run_cogs',True) in ['True', True]:
        config.setdefault('outputs',set()).add("anvio/status/{contigs}-cogs"\
                                                .format(contigs=contigs))

#wildcard_constraints:
#    contigs=r'^contigs.*'

rule anvio_contigs_drop_desc:
    """ Simplify the contig names so AnVio doesn't freak out """
    input:
        "{contigs}.raw.fasta"
    output:
        temp("{contigs}.no_desc.fasta")
    version:
        get_version('sed', lines=[1,])
    log:
        "logs/simplify-{contigs}-names"
    benchmark:
        "benchmarks/simplify-{contigs}-names.time"
    shell:
        'cat {input} | sed -r "s/^>(\S+)\s*.*$/>\\1/" > {output}'

rule anvio_contigs_prune:
    """ drop short contigs """
    input:
        "{contigs}.no_desc.fasta"
    output:
        "anvio/{contigs}.fa"
    log:
        "logs/drop-short-{contigs}"
    benchmark:
        "benchmarks/drop-short-{contigs}.time"
    params:
        min_len=config.get("min_contig_length",2500)
    version:
        config['anvio_version']
    shell:
        """ {config[anvio_prefix]}
            anvi-script-reformat-fasta {input} -o {output} -l {params.min_len} \
             > {log} 2>&1 """

rule contig_db:
    """
    Prep a fasta file of contig sequences for use in AnVio
        * calculates k-mer freqs
        * splits large contigs into pieces for better processing later
        * runs prodigal to find genes/ORFs
    """
    input:
        "anvio/{contigs}.fa"
    output:
        "anvio/status/{contigs}-db"
    log:
        "logs/anvio-{contigs}-db"
    benchmark:
        "benchmarks/anvio-{contigs}-db.time"
    version:
        config['anvio_version']
    shell:
        """{config[anvio_prefix]}
           rm -f anvio/{wildcards.contigs}.db anvio/{wildcards.contigs}.h5
           anvi-gen-contigs-database -f {input} \
             -n {wildcards.contigs} \
             -o anvio/{wildcards.contigs}.db \
             > {log} 2>&1 
           touch {output} """

rule anvio_hmms:
    """ Preprocess contigs to find bacterial single copy genes """
    input:
        "anvio/status/{contigs}-db"
    output:
        "anvio/status/{contigs}-hmms"
    benchmark:
        "benchmarks/{contigs}.hmms.time"
    log:
        "logs/{contigs}.hmms"
    threads:
        20
    version:
        config['anvio_version']
    shell:
        """{config[anvio_prefix]}
           anvi-run-hmms -c anvio/{wildcards.contigs}.db --num-threads {threads} > {log} 2>&1 
           touch {output} """

rule anvio_genes:
    """ extract gene calls (as DNS seqs) from processed contigs """
    input:
        "anvio/status/{contigs}-db"
    output:
        "anvio/{contigs}.genes.ffn"
    benchmark:
        "benchmarks/{contigs}.genes.time"
    log:
        "logs/{contigs}.genes"
    version:
        config['anvio_version']
    shell:
        """{config[anvio_prefix]}
           anvi-get-dna-sequences-for-gene-calls -c anvio/{wildcards.contigs}.db \
            -o {output} > {log} 2>&1 """

rule anvio_contig_cogs:
    """ annotates contigs with COGs """
    input:
        "anvio/status/{contigs}-db"
    output:
        "anvio/status/{contigs}-cogs"
    benchmark:
        "benchmarks/{contigs}.cogs.time"
    log:
        "logs/{contigs}.cogs"
    threads:
        50
    version:
        config['anvio_version']
    shell:
        """{config[anvio_prefix]}
           anvi-run-ncbi-cogs -c anvio/{wildcards.contigs}.db \
            --num-threads {threads} \
            --search-with diamond > {log} 2>&1 
           touch {output}"""

if dbtax:
    # parse config[dbs] to get RefSeq info
    from python.annotate import get_db_types
    gene_family_dbs, config['taxdb'] = get_db_types(config)

    # rules for annotating genes with tax from refseq
    include: "../annotation/lastal.snake"

    rule fake_genes:
        """ create a symlink to the contig genes file with the proper extension, so the lastal rule will find it """
        input: "anvio/{contigs}.genes.ffn"
        output: temp("anvio/{contigs}.genes.fasta")
        params: rel_name=lambda w: w.contigs + ".genes.ffn"
        shell: "rm -f {output} && ln -s {params.rel_name} {output}"

    rule contigs_tax_table:
        """ uses my script to assign taxa to gene calls """
        input:
            "anvio/{contigs}.genes.vs.RefSeq.lastx",
        output:
            "anvio/{contigs}.annotation.tax_matrix.tsv"
        log:
            "logs/{contigs}_tax_table"
        benchmark:
            "benchmarks/{contigs}.tax.table.time"
        params:
            taxdump=os.path.split(config['dbs']["RefSeq"]['path'])[0],
            taxmap=config['dbs']['RefSeq']['path'] + ".tax",
        version:
            get_version('assign_taxa.py')
        shell:
            """echo "gene_callers_id\tt_phylum\tt_class\tt_order\tt_family\tt_genus\tt_species" > {output}
               assign_taxa.py -r species -R phylum -R class -R order -R family\
               -R genus -f blast -F 0 -C first -p accs -n {params.taxdump}\
               -m {params.taxmap} {input} --no-header \
               2> {log} \
               | perl -pe 's/^(\\d+)\\b\\S+/\\1/' \
               >> {output} """

if centrifuge:
    rule contigs_tax_table:
        """ uses centrifuge to assign taxa to gene calls
            
            the first output file is created silently, so it's not in the 
            shell command. """
        input:
            "anvio/contigs.genes.ffn"
        output:
            temp("centrifuge_report.tsv"),
            temp("centrifuge_hits.tsv"),
        log:
            "logs/contigs_centrifuge"
        benchmark:
            "benchmarks/contigs.centrifuge.time"
        params:
            centrifuge=config['centrifuge']['path'] + "/centrifuge",
            db=config['centrifuge']['path'] + "/" + config['centrifuge']['db'],
        version:
            get_version(config['centrifuge']['path'] + "/centrifuge",
                        lines=[1,],
                        regular_expression=r'(\d.+)')
        threads:
            lambda wildcards: config['threads'].get('centrifuge',20)
        shell:
            "{params.centrifuge} -f -x {params.db} -p {threads} \
                {input} -S {output[1]}"

if centrifuge or dbtax:
    rule anvio_gene_taxa:
        """ Loads gene tax assignments into contig DB for AnVio 
        Uses centrifuge if configured, else, it tries to use RefDeq and lastal
        """
        input:
            table=rules.contigs_tax_table.output,
            contig="anvio/status/{contigs}-db"
        output:
            "anvio/status/{contigs}-tax"
        log:
            "logs/anvio-{contigs}-import-taxonomy.log"
        benchmark: "benchmarks/anvio-{contigs}-import-taxonomy.time"
        params:
            format="centrifuge" if centrifuge else "default_matrix",
        version:
            config['anvio_version']
        shell:
            """{config[anvio_prefix]}
               anvi-import-taxonomy -c anvio/{wildcards.contigs}.db \
                 -i {input.table} -p {params.format} > {log} 2>&1 
               touch {output}"""

