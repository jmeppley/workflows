"""
Python Makefile to assemble reads from multiple samples into a single assembly
with megahit.
"""
from python.common import apply_defaults

####
# Required conda packages:
#
# snakemake prodigal megahit bwa
###

######################
# Configuration
#
# Default to "meta-sensitive" preset for megahit
#  (I also often use meta-large)
defaults = {"megahit": {
    'preset': 'meta-sensitive',
    'threads': 40,
    'params': ''
}}
apply_defaults(config, defaults)
# 
######################

#cleaned_reads = [data['clean'] \
#                         for sample,data in config['sample_data'].items() \
#                         if 'clean' in data]

logger.debug("Sample reads: " + repr(config['sample_data']))
logger.debug("Cleaned reads: " + repr(config['cleaned_read_list']))
#logger.debug("Cleaned reads: " + repr(cleaned_reads))

######################
# Rules
rule megahit:
    """
    requires "reads" dictionary in config with map from sample names to list of fastq files of prepped reads for each sample
    """
    input:
        config['cleaned_read_list']
    output:
        "megahit-{preset}/megahit.contigs.fa"
    log:
        "logs/megahit-{preset}.log"
    benchmark:
        "benchmarks/megahit-{preset}.time"
    version:
        get_version('megahit')
    params:
        preset=lambda w: w.preset,
        inputs=','.join(cleaned_reads),
        user_opts=config['megahit']['params']
    threads:
        config['megahit']['threads']
    shell:
        """
        # snakemake generates output dir, but this confuses megahit. 
        # remove it if were not continuing
        if [ -e megahit-{params.preset}/options.json ]; then
            CONT_PARAM="--continue"
        else
            CONT_PARAM=""
            rm -r megahit-{params.preset}
        fi
        megahit --12 {params.inputs} --presets {params.preset} -t {threads} \
         $CONT_PARAM -o megahit-{params.preset} --out-prefix megahit \
         {params.user_opts} \
         > {log} 2>&1
        """


