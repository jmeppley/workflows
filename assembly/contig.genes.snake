"""
Rules that predict genes on a set of contigs using prodigal
"""
from python.common import get_file_name, apply_defaults
from python.assembly import filter_and_extract_rRNA, \
                            get_annotation_locations, \
                            drop_rna_overlaps, filter_annotations
# get gff parsing from py-metagenomics
from snakemake import logger

apply_defaults(config, {'prodigal': {'options': '-p meta -c'}})

# need rRNA hits to filter on
include: "../annotation/cmsearch.snake"

rule prodigal:
    """ get gene predictions form prodigal (defaults above to -p meta -c) """
    input:
        "contigs.all.fasta"
    output:
        gff="contigs.all.prodigal.genes.gff",
        faa="contigs.all.prodigal.genes.faa",
        ffn="contigs.all.prodigal.genes.ffn"
    benchmark:
        "benchmarks/contigs.all.prodigal.genes.time"
    version:
        get_version('prodigal','-v')
    params:
        opts=config['prodigal']['options']
    shell:
        "prodigal -i {input} -f gff -q {params.opts} \
         -o {output.gff} -a {output.faa} -d {output.ffn}"

rule rna_annotation:
    input:
        'contigs.all.vs.{mol}.cmsearch.gff',
        'contigs.all.fasta'
    output:
        fna='contigs.all.annotations.{mol}.fna',
        gff='contigs.all.annotations.{mol}.gff' ,
    benchmark: 'benchmarks/contigs.all.annotations.{mol}.time'
    params:
        buffer=config.get('max_annot_overlap', 0)
    run:
        filter_and_extract_rRNA(input[0], input[1],
                                get_file_name(output.fna),
                                get_file_name(output.gff),
                                wildcards.mol,
                                buffer=params.buffer)

rule drop_rna_overlaps:
    """ 
    Drop genes that overlap RNA predictions.
    """
    input:
        genes=expand("contigs.all.prodigal.genes.{ext}", \
                     ext=['faa', 'ffn', 'gff']),
        rna=expand('contigs.all.annotations.{mol}.gff', \
                    mol=['rRNA', 'tRNA']),
    output:
        expand('contigs.all.annotations.{suff}', \
                          suff=['CDS.gff', 'ffn', 'faa']),
    benchmark:
        "benchmarks/contigs.annotations.drop_rna_ovrlp.time"
    params:
        buffer=config.get('max_annot_overlap', 0)
    run:
        # get dict of rRNA locations
        rna_locations = get_annotation_locations(input.rna)

        # filter files
        for input_file in input.genes:
            print("Filtering {}".format(input_file))
            output_file = [f for f in output \
                                if f.endswith(input_file[-4:])][0]
            drop_rna_overlaps(input_file, output_file, rna_locations,
                              buffer=params.buffer)


rule filter_annotations:
    """
    pull out only annotations of good contigs
    """
    input:
        filter='contigs.filter.list',
        annots='contigs.all.annotations.{suff}'
    output: 'contigs.filter.annotations.{suff}'
    benchmark: 'benchmarks/contigs.filter.annotations.{suff}.time'
    wildcard_constraints:
        suff=r'(CDS\.)?(gff|fna|faa|ffn)'
    run:
        # filter annotations
        filter_annotations(get_file_name(input.filter),
                           get_file_name(input.annots),
                           get_file_name(output))
        


rule merge_annotations:
    input:
        genes='contigs.all.annotations.ffn',
        rna=expand('contigs.all.annotations.{mol}.fna', mol=['rRNA', 'tRNA'])
    output:
        faa='contigs.all.annotations.fna',
    benchmark: 'benchmarks/contigs.all.merged.fna.time'
    run:
        rna_genes = {}
        for gf in input.rna:
            for rna in SeqIO.parse(gf, 'fasta'):
                contig = re.sub(r'_.RNA_\d+$', '', rna.id)
                if contig==rna.id:
                    raise Exception("Cound not get contig from " + contig)
                rna_genes.setdefault(contig, []).append(rna)

        with open(get_file_name(output), 'wt') as OUT:
            last_contig = None
            for gene in SeqIO.parse(get_file_name(input.genes), 'fasta'):
                contig = re.sub(r'_\d+$', '', gene.id)
                if contig==gene.id:
                    raise Exception("Cound not get contig from " + contig)
                if contig != last_contig:
                    for rna in rna_genes.pop(contig, []):
                        OUT.write(rna.format('fasta'))
                    last_contig = contig
                OUT.write(gene.format('fasta'))
            
            for leftover_rna in rna_genes.values():
                for rna in leftover_rna:
                    OUT.write(rna.format('fasta'))


rule merge_annotation_gff:
    """ put filtered RNA and genes into one file """
    input:
        genes='contigs.all.annotations.CDS.gff',
        rna=expand('contigs.all.annotations.{mol}.gff', mol=['rRNA', 'tRNA'])
    output:
        faa='contigs.all.annotations.gff',
    benchmark: 'benchmarks/contigs.all.merged.gff.time'
    shell:
        "cat {input.rna} {input.genes} | grep -v '^#' | sort > {output}"
