"""
Rules and config for using spades to run an assembly
"""

# set some reasonable defaults
import os
from python.common import apply_defaults
from python.qc import NON_EC_PROTOCOLS

# kmers only applies to metagenomic
# use rnakmer for transcript assembly
defaults = {
        'spades':{'ram':255,
                  'threads':20,
                  'tmp_dir':'.',
                  'kmers':'21,33,55,77,99,127',
                  'rnakmer':'55',
                  'params':''},
            }
apply_defaults(config, defaults)

# figure out if we're going to run error correction
#  (can be explicitly set, or we'll try to guess based on cleaning)
run_ec = config.setdefault("run_spades_error_correction",
                           config['cleaning_protocol'] in NON_EC_PROTOCOLS)

# get all the cleaned reads from config[sample_data]
#cleaned_reads = [data['clean'] \
#                         for sample,data in config['sample_data'].items() \
#                         if 'clean' in data]

config.setdefault('outputs', set()).update(
    [
        'stats/all_cleaned_reads.fastq.stats',
        'stats/all_cleaned_reads.fastq.hist',
    ])

rule merge_reads_for_spades:
    """
    Spades only wants one set of paired reads, so we have to combine before assembly
    """
    input: config['cleaned_read_list']
    output: temp("all_cleaned_reads.fastq")
    benchmark: "benchmarks/all_cleaned_reads.merged.time"
    params:
        read_count=len(config['cleaned_read_list']),
    shell: 
        """
        if [ "{params.read_count}" == "1" ]; then
            # just link if it's one file
            ln -s {input} {output}
        else
            cat {input} > {output}
        fi
        """

TMP_DIR = tempfile.TemporaryDirectory( \
                        suffix='tmp', \
                        prefix='spades', \
                        dir=config['spades']['tmp_dir'])

rule run_spades_metagenomic:
    """
    $(CONTIGS_LOCAL): $(R1_FASTQ) $(R2_FASTQ) | $(OUTPUT_DIR)
        $(SPADES) -m $(SPADES_RAM) -o $(OUTPUT_DIR)/spades --pe1-1 $(R1_FASTQ) 
        --pe1-2 $(R2_FASTQ) --only-assembler --meta
    """
    input:
        reads=rules.merge_reads_for_spades.output,
    output: "spades/{product}.fasta"
    wildcard_constraints:
        product=r'(contigs|transcripts)',
    log: "logs/spades.{product}.log"
    benchmark: "benchmarks/spades.{product}.time"
    version: get_version('spades.py')
    threads: int(config['spades']['threads'])
    params:
        mode=lambda w: '--meta' if w.product=='contigs' \
                            else '--rna',
        kmers=lambda w: config['spades']['kmers'] if w.product=='contigs' \
                            else config['spades']['rnakmer'],
        ram_limit=config['spades']['ram'],
        skip_ec='' if run_ec else '--only-assembler',
        params=config['spades']['params']
    shell: """
        if [ -e spades/params.txt ]; then 
            spades.py --continue -o spades
        else
            spades.py {params.mode} -m {params.ram_limit} -t {threads} \
                      -k {params.kmers} --tmp-dir {TMP_DIR.name} \
                      --pe1-12 {input.reads} -o spades \
                      {params.skip_ec} {params.params} 
        fi
        """
