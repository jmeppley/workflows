# Python makefile to assign gene families and taxonomic ranks to
# genes in an faa file using RefSeq, KEGG, PFAM and others.
# Annotations are generated as tables of gene_family counts 
#  groupbed by taxonomic clade
import os
import sys

snakefile_path=os.path.dirname(os.path.abspath(workflow.main_snakefile))
sys.path[0]=os.path.join(snakefile_path,'..','python')
from annotate import get_db_dot_fmt_strings

include: "../common/common.snake"
include: "./common.genes.snake"

# it is assumed that the file {prefix}.faa exists and contains protein seqs
prefix = "genes" if "genes_faa" not in config \
                 else os.path.splitext(config['genes_faa'])[0]
config.setdefault('prefix',prefix)

gene_family_db_dot_fmts = get_db_dot_fmt_strings(gene_family_dbs, config, 'faa')
#print(gene_family_db_dot_fmts )

output_tables = \
        expand("{prefix}.annot.{taxdb}.lastp.{clade}.vs.{db_dot_fmt}.tsv",
                prefix=config['prefix'],
                taxdb=config['taxdbs'],
                db_dot_fmt=gene_family_db_dot_fmts,
                clade=config['clade_ranks']),

#print("\n".join(*output_tables))
##########
# RULES:
#  This lays out the dependencies and logic of the workflow
#  After the "all" target, it is generally laid out start to finish
localrules: all, clean

rule all:
    input:
        output_tables,
        "{prefix}.faa.stats".format(**config)

rule clean:
    """ remove all generated files """
    params:
        anns="{prefix}.annotation.*".format(**config),
        hits=" ".join(expand("{hit_table_prefix}.vs.* {hit_table_prefix}.faa.stats",
                    hit_table_prefix=[config.get('annotation_hit_table_map',{}).get(config['prefix'],config['prefix']),]))
    shell:
        "rm -rf logs benchmarks {params.anns} {params.hits}"

