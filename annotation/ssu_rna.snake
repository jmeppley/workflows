"""
This workflow pulls out SSU rRNA genes using sortmeRNA, quality trims and joins pairs, then runs riboframe.
See code below for details

Structure:
+-.gitignore
+--README.md
+--LICENSE.md
+--config.yaml (none required!)
+--environment: workflows/test/conda/cDNA.yml
+--workflows: workflows/annotation/ssu_rna.snake 
+--scripts
|   +- python scripts: /tools/pymg/
|   +-
+- sortmeRNA hmms: /slipstream/home/jbryant/databases/
+--Snakefile

environment: source activate cDNA

snakemake file assumes that input files are in the working directory. I add symlink to 
directory when files are located elsewhere. 

usage: snakemake -s ~/workflows/annotation/ssu_rna.snake --jobs 9  --use-conda
"""

import os
import re
import sys

snakefile_path = os.path.dirname(os.path.abspath(workflow.snakefile))[0:-11]
pymg_dir = os.path.sep.join([snakefile_path, 'tools', 'pymg'])

sys.path.append(snakefile_path)
sys.path.append(pymg_dir)
sortmerna_database_dir = "/slipstream/home/jbryant/databases/sortmerna/"

RIBOFRAME_DIR = "/slipstream/home/jbryant/workflows/scripts/riboframe/hmms/"
CLASSIFIER_JAR = "/slipstream/home/jbryant/workflows/scripts/riboframe/RDP/classifier.jar"
CLASSIFIER_18S = "/home/jbryant/databases/silva_128_18S/ "

# collect files from current directory
config={'sample_data':[]}
#sample_path = "/mnt/lysine/jbryant/ALOHA_2.0/symlinks"
#sample_path = "/mnt/lysine/jbryant/vibrio_transcriptomics/cDNA_assembly/bfc_salmon"
sample_path = "/mnt/lysine/jbryant/ALOHA_2.0/aloha_viral_fraction"

for file in os.listdir(sample_path):
    if file.endswith(".renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.fastq"):
        config['sample_data'].append(sample_path + '/' + file) 

config['sample_names']=[os.path.basename(x) for x in config['sample_data']]
config['sample_strip']=[os.path.splitext(x)[0] for x in config['sample_names']]
config['sample_clean']=[x.split('.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse')[0] for x in config['sample_strip']]

rule all:
     input: 
          expand("ssu_rRNA/{sample_nameS}.rna.fastq", sample_nameS=config['sample_strip']),
          expand("ssu_rRNA/{sample_name_23}.rna.2.fastq", sample_name_23=config['sample_strip']),
          expand("ssu_rRNA/{sample_name_assembled}.rna.2.assembled.fastq", sample_name_assembled=config['sample_strip']),
          expand("ssu_rRNA/{sample_name_clean}/{sample_name_clean}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.rev.arch.ribosomal.table", sample_name_clean=config['sample_clean']),
          expand("ssu_rRNA/{sample_name_clean}/{sample_name_clean}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.fasta", sample_name_clean=config['sample_clean']), 
          expand("ssu_rRNA/{sample_name_clean}/{sample_name_clean}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.16S.fasta", sample_name_clean=config['sample_clean']),
          expand("ssu_rRNA/{sample_name_clean}/{sample_name_clean}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.18S.fasta", sample_name_clean=config['sample_clean']),
          expand("ssu_rRNA/{sample_name_clean}/{sample_name_clean}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.16S.V4.fasta", sample_name_clean=config['sample_clean']),
          expand("ssu_rRNA/{sample_name_clean}/{sample_name_clean}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.16S.rdp.count.genus.cnt", sample_name_clean=config['sample_clean']),
          expand("ssu_rRNA/{sample_name_clean}/{sample_name_clean}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.18S_tax_assignments.txt", sample_name_clean=config['sample_clean']),
          expand("ssu_rRNA/{sample_name_clean}/{sample_name_clean}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.18S_tax_assignments.D6.counts.txt", sample_name_clean=config['sample_clean']),
          expand("ssu_rRNA/{sample_name_clean}/{sample_name_clean}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.16S_tax_assignments.D5.counts.txt", sample_name_clean=config['sample_clean'])


rule sortmerna:
    """
    run sortmerna interleaved sequences
    """
    
    input:
        "{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.fastq"

    output:
        "ssu_rRNA/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.fastq"
    log:
        "logs/sortmerna.log"
    params:
        prefix="ssu_rRNA/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna"

    benchmark:
        "benchmarks/sortmerna.txt"
    shell:
        """
        echo {input}
        sortmerna --ref {sortmerna_database_dir}silva-euk-18s-id95.fasta,{sortmerna_database_dir}silva-euk-18s-id95.db:{sortmerna_database_dir}silva-bac-16s-id90.fasta,{sortmerna_database_dir}silva-bac-16s-id90.db:{sortmerna_database_dir}silva-arc-16s-id95.fasta,{sortmerna_database_dir}silva-arc-16s-id95.db --reads {input} --aligned {params.prefix} --fastx --paired_in -F -m 10000
        """

rule remove_23S:
    """
    Re-run sortmerna but this time exclude 23S
    #consider running another step to pull out the euk 18S from the 16S!
    """
    
    input:
        "ssu_rRNA/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.fastq"

    output:
        "ssu_rRNA/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.fastq"
        
    log:
        "logs/sortmerna_II.log"
        
    params:
        prefix="ssu_rRNA/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2"

    benchmark:
        "benchmarks/sortmerna.txt"
    shell:
        """
        echo {input}
        sortmerna --ref {sortmerna_database_dir}silva-euk-28s-id98.fasta,{sortmerna_database_dir}silva-euk-28s-id98.db:{sortmerna_database_dir}silva-bac-23s-id98.fasta,{sortmerna_database_dir}silva-bac-23s-id98.db:{sortmerna_database_dir}silva-arc-23s-id98.fasta,{sortmerna_database_dir}silva-arc-23s-id98.db --reads {input} --other {params.prefix} --fastx --paired_in -F -m 10000 --aligned ssu_rRNA/SSU23.fastq
        """

rule separate_interleaved:
    """
    Separate interleaved file into two separate files for PEAR
    """
    
    input:
        "ssu_rRNA/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.fastq"

    output:
        forward = "ssu_rRNA/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2_1.fastq",
        reverse = "ssu_rRNA/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2_2.fastq"
        
    log:
        "logs/seqtk.log"
        
    benchmark:
        "benchmarks/sortmerna.txt"
    shell:
        """
        seqtk seq -1 {input} >{output.forward}
        seqtk seq -2 {input} >{output.reverse}
        """


rule assemble:
    """
    Assemble Paired ends
    """
    
    input:
        forward = "ssu_rRNA/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2_1.fastq",
        reverse = "ssu_rRNA/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2_2.fastq"

    output:
        assembled ="ssu_rRNA/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.fastq",
        forward_reads = "ssu_rRNA/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.unassembled.forward.fastq"
        
    log:
        "logs/pear.log"
        
    params:
        prefix="ssu_rRNA/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2"

    benchmark:
        "benchmarks/sortmerna.txt"
    shell:
        """
        pear -f {input.forward} -r {input.reverse} -o {params.prefix} >> logs/pear.log
        """
        

rule fastq_to_fasta:
    """
    Fastq to Fasta
    Including paired and forward reads because some of the libraries didn't assemble well
    """
    
    input:
        assembled = "ssu_rRNA/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.fastq",
        forward = "ssu_rRNA/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.unassembled.forward.fastq"
    output:
        "ssu_rRNA/{sample_name}/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.fasta"
    log:
        "logs/seqtk.log"
                
    benchmark:
        "benchmarks/seqtk.txt"
    shell:
        """
        cat {input.assembled} {input.forward} | seqtk seq -A - > {output}
        """

rule separate_out_18S:
    """
    separate out 18S sequences
    """
    
    input:
        "ssu_rRNA/{sample_name}/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.fasta"
    output:
        "ssu_rRNA/{sample_name}/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.18S_0.fasta"
    log:
        "logs/sortmerna.log"
    params:
        prefix="ssu_rRNA/{sample_name}/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.18S_0"
    benchmark:
        "benchmarks/sortmerna.txt"
    shell:
        """
        sortmerna --ref {sortmerna_database_dir}silva-euk-18s-id95.fasta,{sortmerna_database_dir}silva-euk-18s-id95.db --reads {input} --aligned {params.prefix} --fastx -F -m 10000
        """

rule riboframe_hmms:
    """
    Hmm search
    """
    
    input:
        "ssu_rRNA/{sample_name}/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.fasta"
    output:
        bact_for="ssu_rRNA/{sample_name}/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.fwd.bact.ribosomal.table",
        bact_rev="ssu_rRNA/{sample_name}/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.rev.bact.ribosomal.table",
        arch_for="ssu_rRNA/{sample_name}/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.fwd.arch.ribosomal.table",
        arch_rev="ssu_rRNA/{sample_name}/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.rev.arch.ribosomal.table"

    params:
        folder_name="{sample_name}"

    benchmark:
        "benchmarks/riboframe.txt"

    shell:
        """
        hmmsearch -E 0.00001 --domtblout {output.bact_for} --noali --cpu 2 -o /dev/null {RIBOFRAME_DIR}16S_bact_for3.hmm {input}
        hmmsearch -E 0.00001 --domtblout {output.bact_rev} --noali --cpu 2 -o /dev/null {RIBOFRAME_DIR}16S_bact_rev3.hmm {input}
        hmmsearch -E 0.00001 --domtblout {output.arch_for} --noali --cpu 2 -o /dev/null {RIBOFRAME_DIR}16S_arch_for3.hmm {input}
        hmmsearch -E 0.00001 --domtblout {output.arch_rev} --noali --cpu 2 -o /dev/null {RIBOFRAME_DIR}16S_bact_rev3.hmm {input}
        """

rule ribotrap:
         """
         ribotrap
         """
         input:
             "ssu_rRNA/{sample_name}/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.fwd.bact.ribosomal.table"
           
         output:
             "ssu_rRNA/{sample_name}/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.16S.fasta"
         params:
             folder_name="ssu_rRNA/{sample_name}/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled"
         benchmark:
             "benchmarks/ribotrap.txt"
         shell:
             """
             perl /slipstream/home/jbryant/workflows/scripts/riboframe/riboTrap.pl {params.folder_name} nopair
             """

rule extract_V4_16S:
	"""
	using one of John's scripts, that is written in python2
	"""
	
	input:
	    "ssu_rRNA/{sample_name}/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.16S.fasta"

	output:
	    "ssu_rRNA/{sample_name}/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.16S.V4.fasta"
	
	params:
	    python_path='/slipstream/home/jbryant/workflows/scripts/riboframe'
	
	shell:
	    """
	    cat {input} | python2 -c "import sys; sys.path[0]='/slipstream/home/jbryant/workflows/scripts/riboframe'; import riboframe; riboframe.pull_out_region_piped('V4', padding=1);" > {output}
	    """

rule classify:
	"""
	Using RDP classifier
	"""
	
	input:
	    "ssu_rRNA/{sample_name}/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.16S.fasta"

	output:
	    "ssu_rRNA/{sample_name}/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.16S.rdp"
	
	
	params:
		classifier_jar='/slipstream/home/jbryant/workflows/scripts/riboframe/RDP/classifier.jar'
	
	shell:
	    """
	    java -Xmx1g -jar {params.classifier_jar} -q {input} -o {output}
	    """

rule assign_taxa_to_16S_with_uclust:
    """
    Just using uclust to classify euks
   """

    input:
        "ssu_rRNA/{sample_name}/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.16S.fasta"
    
    output:
        "ssu_rRNA/{sample_name}/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.16S_tax_assignments.txt"
    
    params:
       folder_name="ssu_rRNA/{sample_name}"
    
    conda:
         "/slipstream/home/jbryant/workflows/annotation/alternative.yaml"
    
    shell:
        """
        assign_taxonomy.py -m uclust --similarity 0.95 --min_consensus_fraction 0.79  -i {input} --uclust_max_accepts 5 -o {params.folder_name} -t /slipstream/home/jbryant/databases/SILVA_128_For_QIIME/SILVA_128_QIIME_release/taxonomy/taxonomy_all/99/consensus_taxonomy_7_levels.txt -r /slipstream/home/jbryant/databases/SILVA_128_For_QIIME/SILVA_128_QIIME_release/rep_set/rep_set_all/99/99_otus.fasta
        """

rule extract_additional_18S_sequences:
   """
   Uclust with Silva identifies additional 18S sequences missed by sortmeRNA
   This chunk of code adds them to the 18S fasta file 
   """
    input:
        fasta_18S = "ssu_rRNA/{sample_name}/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.18S_0.fasta",
        fasta_16S = "ssu_rRNA/{sample_name}/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.16S.fasta",
        Uclust_assignments = "ssu_rRNA/{sample_name}/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.16S_tax_assignments.txt"

    output:
        "ssu_rRNA/{sample_name}/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.18S.fasta"
    
    params:
       folder_name="ssu_rRNA/{sample_name}"
    
    shell:
        """
         grep 'D_0__Eukaryota' {input.Uclust_assignments} | cut -f1 | grep -A 1 - {input.fasta_16S} | cat - {input.fasta_18S} > {output} || :
        """


rule count_16S_Uclust_assignments:
    """
    make count table
    """

    input:
        "ssu_rRNA/{sample_name}/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.16S_tax_assignments.txt"

    output:
        "ssu_rRNA/{sample_name}/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.16S_tax_assignments.D5.counts.txt"

    conda:
         "/slipstream/home/jbryant/workflows/annotation/alternative.yaml"

    shell:
        """
        python /slipstream/home/jbryant/workflows/python/count_Uclust_output.py {input}
        """

rule assign_taxa_to_18S:
    """
    Just using uclust to classify euks

    here is what I did with SILVA_128:
    1) download 420,814 eukaryotic 18S (hopefully) silva sequences ~/databases/silva_128_18S    
    2) https://github.com/mikerobeson/Misc_Code/tree/master/SILVA_to_RDP

    3) arb-silva.de_2017-11-10_id475791_tax_silva.fasta
    4) sed -i '/^[^>]/ y/uU/tT/' arb-silva.de_2017-11-10_id475791_tax_silva.fasta

    5) python2 /slipstream/home/jbryant/programs/prep_silva_data.py  arb-silva.de_2017-11-10_id475791_tax_silva.fasta  arb-silva.de_2017-11-10_id475791_tax_silva_RDP.txt arb-silva.de_2017-11-10_id475791_tax_silva_RDP.fasta
    6) python2 /slipstream/home/jbryant/programs/prep_silva_taxonomy_file.py  arb-silva.de_2017-11-10_id475791_tax_silva_RDP.txt  arb-silva.de_2017-11-10_id475791_tax_silva_RDP_formated.txt    
    """

    input:
        "ssu_rRNA/{sample_name}/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.18S.fasta"
    
    output:
        "ssu_rRNA/{sample_name}/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.18S_tax_assignments.txt"
    
    params:
       folder_name="ssu_rRNA/{sample_name}"
    
    conda:
         "/slipstream/home/jbryant/workflows/annotation/alternative.yaml"
    
    shell:
        """
        assign_taxonomy.py -i {input} -o {params.folder_name} -t /slipstream/home/jbryant/databases/silva_128_18S/arb-silva.de_2017-11-10_id475791_tax_silva_RDP_formated.txt -r /slipstream/home/jbryant/databases/silva_128_18S/arb-silva.de_2017-11-10_id475791_tax_silva_RDP.fasta
        """

rule count_18S_assignments:
    """
    make count table
    """

    input:
        "ssu_rRNA/{sample_name}/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.18S_tax_assignments.txt"

    output:
        "ssu_rRNA/{sample_name}/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.18S_tax_assignments.D6.counts.txt"

    conda:
         "/slipstream/home/jbryant/workflows/annotation/alternative.yaml"

    shell:
        """
        python /slipstream/home/jbryant/workflows/python/count_Uclust_output.py {input}
        """

rule count_rdp:
	"""
    covplot=1 abuplot=0 produces SSU coverage plots
    covplot=0 abuplot=0 produces count tables that accurately reflect read counts
	"""
	
	input:
	    "ssu_rRNA/{sample_name}/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.16S.rdp"
	
	output:
	    "ssu_rRNA/{sample_name}/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.16S.rdp.count.genus.cnt"
	
	params:
	    output="ssu_rRNA/{sample_name}/{sample_name}.renamed.interleaved.noadapt.nophix.corrected.trimmed.dropse.rna.2.assembled.16S.rdp.count"

	shell:
	    """
	    perl  /slipstream/home/jbryant/workflows/scripts/riboframe/riboMap.pl file={input} var=full conf=0.8 cross=any percmin=.05  covplot=0 abuplot=1 out={params.output}.fig;
	    perl  /slipstream/home/jbryant/workflows/scripts/riboframe/riboMap.pl file={input} var=full conf=0.8 cross=any percmin=.05  covplot=0 abuplot=0 out={params.output}
	    """