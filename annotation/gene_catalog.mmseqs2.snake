import tempfile
from python.common import apply_defaults
from python.gene_catalog import parse_mmseq_clusters

# software parameters
defaults = {
    'mmseqs2': {
        'threads': 20,
        'program': 'cluster',
        'options': '--min-seq-id 0.97 -c 0.8 --cov-mode 0 --cluster-mode 0',
        'output_str': 'cluster.setcover.97',
        'tmp_dir_root': '.',
    },
}
apply_defaults(config, defaults)
cluster_suffix = config['mmseqs2']['output_str']
config['cluster_type'] = 'faa'
tmp_dir = tempfile.TemporaryDirectory(dir=config['mmseqs2']['tmp_dir_root'],
                                      prefix='tmp_mmseqs2_')

rule extract_faa:
    input: 
        reps="all_genes.faa.{}.reps.index".format(cluster_suffix),
        db="all_genes.faa.db"
    output: "all_genes.faa.{}".format(cluster_suffix)
    benchmark: 'benchmarks/all_genes.faa.{}.extract.faa.time' \
                        .format(cluster_suffix)
    params:
        reps="all_genes.faa.{}.reps".format(cluster_suffix),
    shell:
        """
         mmseqs result2flat {input.db} {input.db} {params.reps} {output} \
           --use-fasta-header > {output}.log
        """

rule extract_reps:
    input:
        clusters="all_genes.faa.{}.result.index".format(cluster_suffix),
        db='all_genes.faa.db',
    output: "all_genes.faa.{}.reps.index".format(cluster_suffix)
    benchmark: 'benchmarks/all_genes.faa.{}.extract.reps.time' \
                        .format(cluster_suffix)
    params:
        clusters="all_genes.faa.{}.result".format(cluster_suffix),
        reps="all_genes.faa.{}.reps".format(cluster_suffix),
    shell:
        """
         mmseqs result2repseq {input.db} {params.clusters} {params.reps} > {output}.log
        """

rule cluster_faa:
    input: "all_genes.faa.db"
    output: "all_genes.faa.{}.result.index".format(cluster_suffix)
    benchmark: 'benchmarks/all_genes.faa.{}.cluster.time' \
                        .format(cluster_suffix)
    threads: config['mmseqs2']['threads']
    params:
        output="all_genes.faa.{}.result".format(cluster_suffix)
    shell:
        "mmseqs {config[mmseqs2][program]} \
            {input} {params.output} {tmp_dir.name} \
            {config[mmseqs2][options]} --threads {threads}"

rule formatdb_for_mmseqs:
    input: "all_genes.faa"
    output: 'all_genes.faa.db'
    benchmark: 'benchmarks/format_for_mmseqs.time'
    shell: "mmseqs createdb {input} {output} > {input}.createdb.log 2>&1"

rule generate_table:
    input:
        clusters="all_genes.faa.{}.result.index".format(cluster_suffix),
        db='all_genes.faa.db',
    output: "all_genes.faa.{}.tab".format(cluster_suffix)
    benchmark: 'benchmarks/all_genes.faa.{}.extract.tab.time' \
                        .format(cluster_suffix)
    params:
        clusters="all_genes.faa.{}.result".format(cluster_suffix),
    shell:
        """
         mmseqs createtsv {input.db} {input.db} {params.clusters} {output} > {output}.log
        """

rule reformat_table:
    """ turn .clstr file into simple cluster table """
    input: "all_genes.faa.{}.tab".format(cluster_suffix)
    output: prefix + ".clusters"
    benchmark: 'benchmarks/{}.clusters.time'.format(prefix)
    run:
        parse_mmseq_clusters(get_file_name(input),
                           get_file_name(output))
