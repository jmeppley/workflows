#########
# CONFIGURATION
#
# rank to collect taxa on (defaults to order)
config.setdefault('clade_ranks', ['order'])
#
# threads per search are set in the threads: parameter for each tool:
# threads:
#   default: 5
# lastal:
#   threads: 20
# hmmer:
#   threads: 2
#Defaults to 8 for eveerything
default_threads=config.setdefault('threads',{}).get('default', 3)
#
# End configuration
##########

translation_rexp = re.compile(r'^NEVER_TRANSLATE_GENES$')
include: "common.snake"

rule compile_counts:
    """
    Use clade assignments and gene family assignments to compile a table of gene family counts by clade.
    """
    input:
        "{prefix}.annot.{taxdb}.{taxalg}.{rank}.tsv",
        "{prefix}.annot.gene_family.{db}.{dbfmt}.tsv",
        "{prefix}.coverage.tsv",
    output:
        "{prefix}.annot.{taxdb}.{taxalg}.{rank}.vs.{db}.{dbfmt}.tsv"
    benchmark:
        "benchmarks/compile_counts.{prefix}.{taxdb}.{taxalg}.{rank}.{db}.{dbfmt}"
    log:
        "logs/compile_counts.{prefix}.{taxdb}.{taxalg}.{rank}.{db}.{dbfmt}"
    version:
        get_version('compile_hit_counts.py')
    params:
        three_column_opt="-L" if config.get('output_style','default').lower() == 'long' else ""
    shell:
        "compile_hit_counts.py {params.three_column_opt} \
            -1 {input[0]} -2 {input[1]} \
            -m {input[2]} \
            -o {output} -S"
