from python.annotate import get_db_types, get_db_assignment_params

#########
# CONFIGURATION
#
# pull out lists of configured DBs split into gene faimily DBs and taxonomic
# DBs
gene_family_dbs, config['taxdbs'] = get_db_types(config)
#
# threads per search are set in the threads: parameter
# Either use the db name or "default". EG:
# threads:
#   default: 5
#   lastal: 20
# Defaults to 8 for eveerything
default_threads=config.setdefault('threads',{}).get('default', 3)
#
# End configuration
##########
include: "lastal.snake"
include: "hmmer.snake"

def get_hit_filter(wildcards):
    """
    inserts up to two filters into the bash pipeline:
     * remove suffixes from prodigal or six-frame-translation
     * apply hit filters from configuration
    """
    logger.debug("Wildcards: " + repr(wildcards))
    read_name_filter = get_read_name_filter(wildcards)
    logger.debug("read filter is: " + read_name_filter)
    hit_table_filter = get_hit_table_filter(wildcards)
    logger.debug("hits filter is: " + hit_table_filter)

    cmds = set([c for c in [read_name_filter, hit_table_filter] if c != 'cat'])
    logger.debug(cmds)
    if len(cmds) >= 1:
        return " | ".join(cmds)
    else:
        return "cat"


def get_hit_table_filter(wildcards):
    """
    If "cutoffs" in the db config, run filter_blast_m8.py
    """
    db=wildcards.db
    db_config=config['dbs'][db]
    if 'cutoffs' in db_config:
        # get format string for filter script
        # this is a little different for tax and path searches
        if 'lastalg' in wildcards._names:
            fmt='blast' if re.search(r'^b?last[pnx]$', wildcards.lastalg) \
                        else wildcards.lastalg
        else:
            fmt='hmmsearchdom' if re.search(r'^tbl\b', wildcards.ext) \
                                        else 'blast'
    
        # the filter cutoffs
        filter_opts = " ".join("--{} {}".format(f,v) \
                               for f,v in db_config['cutoffs'].items())

        return "filter_blast_m8.py -f {fmt} {filter_opts}".format(**locals())
    else:
        return "cat"

def get_read_name_filter(wildcards):
    """
    Figure out if we need to translate read names. Usually this takes gene 
    names back to reads.

    Return the sed command to rename fasta records if needed or return cat
    to leave data unchanged
    """
    try:
        if translation_rexp.search(w.prefix):
            return translation_filter
    except NameError:
        pass

    # if ecpr doesnt match or is not defined:
    return "cat"

rule assign_taxa:
    """
    Turn a hit table of reads vs RefSeq into a table of read taxon assignments
    """
    input:
        "{prefix}.vs.{db}.{lastalg}"
    output:
        temp("{prefix}.annot.{db}.{lastalg,(last[nxp]|sam)}.{rank,[^.]+}.tsv")
    benchmark:
        "benchmarks/{prefix}.assign_taxa.{rank}.{db}.{lastalg}.time"
    params:
        taxdump=lambda w: os.path.split(config['dbs'][w.db]['path'])[0],
        taxmap=lambda w: config['dbs'][w.db]['path'] + ".tax",
        format=lambda w: 'blast' if re.search(r'^b?last[pnx]$', w.lastalg)\
                                 else w.lastalg,
        # Filter reading frame suffixes if translated with transeq or prodigal
        filter=get_hit_filter,
    version:
        get_version('assign_taxa.py')
    resources:
        disk=1
    shell:
         "cat {input} \
          | {params.filter} \
          | assign_taxa.py -o {output} -r {wildcards.rank} \
            -f {params.format} -F 0 -C first -p accs \
            -n {params.taxdump} -m {params.taxmap}"

rule assign_paths:
    """
    Turn a hit table (from hmmer or lastal) into a one-to-many map from reads to gene families.

    The first hit with the best evalue is used. About 0.05% to 0.1% of reads had ambiguous hits in test data.
    """
    input:
        "{prefix}.vs.{db}.{ext}"
    output:
        temp("{prefix}.annot.gene_family.{db,[^.]+}.{ext}.tsv")
    benchmark:
        "benchmarks/{prefix}.assign_paths.{db}.{ext}.time"
    log:
        "logs/{prefix}.assign_paths.{db}.{ext}.log"
    resources:
        disk=1
    version:
        get_version('assign_paths.py')
    params:
        format=lambda w: 'hmmsearchdom' if re.search(r'^tbl\b',w.ext) \
                                        else 'blast',
        # KEGG and PFAM need special handling
        params=lambda w: get_db_assignment_params(w, config),
        # Filter reading frame suffixes if translated with transeq or prodigal
        filter=get_hit_filter,
    shell:
         "cat {input} \
          | {params.filter} \
          | assign_paths.py --sort evalue -f {params.format} {params.params} \
            -o {output}"

rule count_tax_hits:
    input:
        "{hit_table_prefix}.annot.{db}.{alg}.{rank}.tsv"
    output:
        "{hit_table_prefix}.annot.{db}.{alg}.{rank}.count.tsv"
    benchmark:
        "benchmarks/{hit_table_prefix}.{db}.{alg}.{rank}.count.time"
    log:
        "logs/{hit_table_prefix}.{db}.{alg}.{rank}.count.log"
    version:
        get_version("count_hits.py")
    resources:
        disk=1
    shell:
        "count_hits.py -v -i {input} -H 1 -a portion\
        > {output} 2> {log}"

