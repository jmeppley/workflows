from python.annotate import get_db_types, get_db_assignment_params

#########
# CONFIGURATION
#
# pull out taxdb (usually refseq) and list of gene family dbs from config
gene_family_dbs, config['taxdb'] = get_db_types(config)
#
# threads per search are set in the threads: parameter
# Either use the db name or "default". EG:
# threads:
#   default: 5
#   lastal: 20
# Defaults to 8 for eveerything
default_threads=config.setdefault('threads',{}).get('default', 3)
#
# End configuration
##########
include: "lastal.snake"
include: "hmmer.snake"

def get_read_name_filter(wildcards):
    """
    Figure out if we need to translate read names. Usually this takes gene 
    names back to reads.

    Return the sed command to rename fasta records if needed or return cat
    to leave data unchanged
    """
    try:
        if translation_rexp.search(w.prefix):
            return translation_filter
    except NameError:
        pass

    # if ecpr doesnt match or is not defined:
    return "cat"

rule assign_taxa:
    """
    Turn a hit table of reads vs RefSeq into a table of read taxon assignments
    """
    input:
        "{prefix}.vs.{db}.{lastalg}"
    output:
        temp("{prefix}.annot.{db}.{lastalg,(last[nxp]|sam)}.{rank,[^.]+}.tsv")
    benchmark:
        "benchmarks/{prefix}.assign_taxa.{rank}.{db}.{lastalg}.time"
    params:
        taxdump=lambda w: os.path.split(config['dbs'][w.db]['path'])[0],
        taxmap=lambda w: config['dbs'][w.db]['path'] + ".tax",
        format=lambda w: 'blast' if re.search(r'^b?last[pnx]$', w.lastalg)\
                                 else w.lastalg,
        # Filter reading frame suffixes if translated with transeq or prodigal
        filter=get_read_name_filter,
    version:
        get_version('assign_taxa.py')
    shell:
         "cat {input} \
          | {params.filter} \
          | assign_taxa.py -o {output} -r {wildcards.rank} \
            -f {params.format} -F 0 -C first -p accs \
            -n {params.taxdump} -m {params.taxmap}"

rule assign_paths:
    """
    Turn a hit table (from hmmer or lastal) into a one-to-many map from reads to gene families.

    The first hit with the best evalue is used. About 0.05% to 0.1% of reads had ambiguous hits in test data.
    """
    input:
        "{prefix}.vs.{db}.{ext}"
    output:
        temp("{prefix}.annot.gene_family.{db,[^.]+}.{ext}.tsv")
    benchmark:
        "benchmarks/{prefix}.assign_paths.{db}.{ext}.time"
    log:
        "logs/{prefix}.assign_paths.{db}.{ext}.log"
    version:
        get_version('assign_paths.py')
    params:
        format=lambda w: 'hmmsearchdom' if re.search(r'^tbl\b',w.ext) \
                                        else 'blast',
        # KEGG and PFAM need special handling
        params=lambda w: get_db_assignment_params(w, config),
        # Filter reading frame suffixes if translated with transeq or prodigal
        filter=get_read_name_filter,
    shell:
         "cat {input} \
          | {params.filter} \
          | assign_paths.py --sort evalue -C first -f {params.format} {params.params} \
            -o {output}"

rule count_tax_hits:
    input:
        "{hit_table_prefix}.annot.{db}.{alg}.{rank}.tsv"
    output:
        "{hit_table_prefix}.annot.{db}.{alg}.{rank}.count.tsv"
    benchmark:
        "benchmarks/{hit_table_prefix}.{db}.{alg}.{rank}.count.time"
    log:
        "logs/{hit_table_prefix}.{db}.{alg}.{rank}.count.log"
    version:
        get_version("count_hits.py")
    shell:
        "count_hits.py -v -i {input} -H 1 -a portion\
        > {output} 2> {log}"

