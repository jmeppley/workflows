DROP_COMMENTS = "perl -ne 'if (m/^[^#]/) { print; }'"

rule compile_lastdb:
    """
    Compile fasta file into lastb
    This currenlty only works for protein dbs. Would a second rule for nucl
    work?
    """
    input:
        '{db_path}.faa',
    output: "{db_path}.prj"
    threads:
        lambda wildcards: config.get('lastal',{}).get('threads',10)
    params:
        lastdb=lambda w: 'lastdb8' \
                    if os.path.dirname(w.db_path)[-1]=='8' \
                    else 'lastdb'
    shell: "{params.lastdb} -P {threads} -v -p {wildcards.db_path} {input}"

rule get_db_id_map:
    """
    Compile fasta file into lastb
    This currenlty only works for protein dbs. Would a second rule for nucl
    work?
    """
    input: '{db_path}.faa'
    output: "{db_path}.ids"
    shell: r"grep '^>' {input} | perl -pe 's/^>(\S+)\s+/\1\t/' > {output}"

rule lastal:
    """
    Look for matches in RefSeq or KEGG
    """
    input:
        lambda w: "{file_root}.{ext}".format(file_root=w.file_root,
                ext="faa" if w.alg=='p' else 'fasta'),
        lambda w: config['dbs'][w.db]['path'] + ".prj"
    output:
        "{file_root}.vs.{db}.last{alg,[xpn]}"
    benchmark:
        "benchmarks/lastal.{file_root}.vs.{db}.{alg}.time"
    log:
        "logs/lastal.{file_root}.vs.{db}.{alg}.log"
    version:
        get_version('lastal')
    threads:
        lambda wildcards: config.get('lastal',{}).get('threads',10)
    params:
        db_path=lambda w: config['dbs'][w.db]['path'],
        fshift=lambda w: "-F 15" if w.alg=='x' else "",
        opts=lambda w: "" if w.alg=='n' else "-b 1 -x 15 -y 7 -z 25",
        keep=config.get('last_filter','-F 5'),
        lastal=lambda w: 'lastal8' \
                if os.path.dirname(config['dbs'][w.db]['path'])[-1]=='8' \
                else 'lastal'
    shell:
        "{params.lastal} -P {threads} {params.fshift} -f BlastTab \
         {params.opts} {params.db_path} {input[0]} \
         | {DROP_COMMENTS} \
         | filter_blast_m8.py -f blast {params.keep} \
         > {output}"

