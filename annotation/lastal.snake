DROP_COMMENTS = "perl -ne 'if (m/^[^#]/) { print; }'"

include: "ids.snake"

rule compile_lastdb:
    """
    Compile fasta file into lastdb

    This only works if db and fasta file names conform to the expectations of
    the py-metagenomics dabases. For lastdb this is

    AA fasta: XXX.faa 
    AA db:    XXX.faa.ldb/lastdb

    (faa would change for a nucl db to one of fa, fasta, fna, or ffn)
    """
    input:
        '{file_root}.{fasta_ext}',
    output: "{file_root}.{fasta_ext}.{ldb}/lastdb.prj"
    wildcard_constraints:
        ldb='ldb8?',
        fasta_ext='(faa|ffn|fna|fasta|fa)'
    threads:
        lambda wildcards: config.get('lastal',{}).get('threads',10)
    resources:
        disk=2
    params:
        lastdb=lambda w: 'lastdb8' if w.ldb == 'ldb8' else 'lastdb',
        db="{file_root}.faa.{ldb}/lastdb",
        prot=lambda w: '-p' if w.fasta_ext == 'faa' else ''
    shell: "{params.lastdb} -P {threads} -v {params.prot} {params.db} {input}"

rule lastal:
    """
    Look for matches in RefSeq or KEGG
    """
    input:
        lambda w: "{file_root}.{ext}".format(file_root=w.file_root,
                ext="faa" if w.alg=='p' else 'fasta'),
        lambda w: config['dbs'][w.db]['path'] + ".prj"
    output:
        "{file_root}.vs.{db}.last{alg,[xpn]}"
    benchmark:
        "benchmarks/lastal.{file_root}.vs.{db}.{alg}.time"
    log:
        "logs/lastal.{file_root}.vs.{db}.{alg}.log"
    version:
        get_version('lastal')
    threads:
        lambda wildcards: config.get('lastal',{}).get('threads',10)
    resources:
        disk=1
    params:
        db_path=lambda w: config['dbs'][w.db]['path'],
        fshift=lambda w: "-F 15" if w.alg=='x' else "",
        opts=lambda w: "" if w.alg=='n' else "-b 1 -x 15 -y 7 -z 25",
        keep=config.get('last_filter','-F 5'),
        lastal=lambda w: 'lastal8' \
                if os.path.dirname(config['dbs'][w.db]['path'])[-1]=='8' \
                else 'lastal'
    shell:
        "{params.lastal} -P {threads} {params.fshift} -f BlastTab \
         {params.opts} {params.db_path} {input[0]} \
         | {DROP_COMMENTS} \
         | filter_blast_m8.py -f blast {params.keep} \
         > {output}"

