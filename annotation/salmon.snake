from python.common import get_file_name, apply_defaults
from python.samples import get_sample_reads_for_mapping
if 'salmon_env' not in config:
    config['salmon_prefix']=""
else:
    config['salmon_prefix'] = "source activate {}\n".format(config['salmon_env'])

config['salmon_version'] = get_version("salmon",
                                       cmd_prefix=config['salmon_prefix'],)

apply_defaults(config, {'salmon': {'threads': 4,
                                  'index_options': '',
                                  'quant_options': '',
                                  'lib_type': 'A'}})
config['cov_col'] = 'TPM'
config['read_col'] = 'NumReads'
config['contig_col'] = 'Name'

def get_sample_reads(w):
    sample_reads = get_sample_reads_for_mapping(w, config)
    #logger.debug('CONFIG: {}\nsample reads:\n{}\n'.format(yaml.dump(config), repr(sample_reads)))
    if not isinstance(sample_reads, str):
        if len(sample_reads)==2:
            return sample_reads
        if len(sample_reads)==1:
            sample_reads = sample_reads[0]
        else:
            raise Exception("I don't know how to handle more than two read "
                            "files per sample!\nSample {}\nFiles {}"\
                            .format(w.sample, repr(sample_reads)))
    # single files need to be split apart
    return [sample_reads + ".1.fastq",
            sample_reads + ".2.fastq"]

def get_sample_reads_option(w):
    """ return option string for salmon reads """
    sample_reads = get_sample_reads_for_mapping(w, config)
    if not isinstance(sample_reads, str):
        if len(sample_reads)==2:
            flags = ['-{} {}'.format(i+1, f) \
                       for i, f \
                       in enumerate(sample_reads)]
            return ' '.join(flags)
        if len(sample_reads)==1:
            sample_reads = sample_reads[0]
        else:
            raise Exception("I don't know how to handle more than two read "
                            "files per sample!\nSample {}\nFiles {}"\
                            .format(w.sample, repr(sample_reads)))
    # single files need to be split apart
    return '-1 {file}.1.fastq -2 {file}.2.fastq'.format(file=sample_reads)

def get_salmon_json():
    """ If version is pre 1.0, look for header.json, else info.json """
    first_digit = re.sub(r'^[^0-9]+', '', config['salmon_version'])[0]
    if first_digit == '0':
        return "salmon/{contigs}.index/header.json"
    return "salmon/{contigs}.index/info.json"

rule index_contigs_salmon:
    """ process a set of transcripts for salmon quanitfication """
    input: "{contigs}.fasta"
    output: get_salmon_json()
    log: "logs/salmon.{contigs}.index"
    benchmark: "benchmarks/salmon.{contigs}.index.time"
    params: 
        outdir=lambda w: "salmon/{}.index".format(w.contigs)
    version: config['salmon_version']
    shell:
        """
        {config[salmon_prefix]}
        rm -rf {params.outdir}
        salmon index -t {input} -i {params.outdir} \
         -p {threads} {config[salmon][index_options]} \
         > {log} 2>&1
        """

rule split_reads_for_quant:
    """ take an interleaved fastq file and split
    into .se .1 and .2"""
    input: "{prefix}.fastq"
    output:
        "{prefix}.fastq.se.fastq",
        "{prefix}.fastq.1.fastq",
        "{prefix}.fastq.2.fastq"
    run:
        from Bio import SeqIO
        unpaired_reads = {}
        with open(output[1], 'w') as O1:
          with open(output[2], 'w') as O2:
            for record in SeqIO.parse(get_file_name(input), 'fastq'):
                recordid = re.sub(r'/[12]$', '', record.id)
                if recordid not in unpaired_reads:
                    unpaired_reads[recordid] = record.format('fastq')
                else:
                    O1.write(record.format('fastq'))
                    O2.write(unpaired_reads.pop(recordid))
        with open(output[0], 'w') as SE:
            for fastq in unpaired_reads.values():
                SE.write(fastq)

rule quant_reads_salmon:
    """ quantify a set of reads a gainst a salmon index """
    input:
        index=get_salmon_json(),
        reads=get_sample_reads,
    output:
        quant="salmon/{sample}.vs.{contigs}.quant/quant.sf",
        samfile=temp("mapping/{sample}.reads.vs.{contigs}.sam") \
            if config['produce_bam'] else [],
    log: "logs/salmon.{sample}.vs.{contigs}.quant.log"
    benchmark: "benchmarks/salmon.{sample}.vs.{contigs}.time"
    version: config['salmon_version']
    params:
        reads=get_sample_reads_option,
        outdir=lambda w: "salmon/{sample}.vs.{contigs}.quant".format(
                                sample=w.sample,
                                contigs=w.contigs),
        indir=lambda w: "salmon/{contigs}.index".format(contigs=w.contigs),
        sam="-z=mapping/{sample}.reads.vs.{contigs}.sam" \
            if config['produce_bam'] else "",
    shell:
        """
        {config[salmon_prefix]}
        rm -rf {params.outdir}
        salmon quant -i {params.indir} -p {threads} --meta \
         -l {config[salmon][lib_type]} {config[salmon][quant_options]} \
         {params.reads} -o {params.outdir} \
         > {log} 2>&1
        """

rule coverages_file:
    " Use quant.sf file as coverages file "
    input: "salmon/{sample}.vs.{contigs}.quant/quant.sf"
    output: "{contigs}.coverages.{sample}.tsv"
    shell: "ln -s {input} {output}"

