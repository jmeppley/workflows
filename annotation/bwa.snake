BWA_VERSION = \
        get_version('bwa', 
                    version_flag="", 
                    regular_expression=re.compile(r'Version:\s*(\S[^\n\r]+\S)'))

include: "ids.snake"

rule map_genes_to_bwadb:
    """
    map genes to BWA db. 
    There must be a bwa formatted db path configured in:
        config['dbs'][wildcards.db]['path']
    """
    input:
        fasta="{file_root}.fasta",
        db=lambda w: config['dbs'][w.db]['path'] + ".bwt"
    output:
        ("{file_root}.vs.{db}.bwa.sam")
    log:
        "logs/{file_root}.vs.{db}.bwa.sam.log"
    benchmark:
        "benchmarks/{file_root}.vs.{db}.bwa.sam.time"
    version: BWA_VERSION
    threads:
        lambda w: config.get('bwa',{}).get('threads',20)
    params:
        db_path=lambda w: config['dbs'][w.db]['path'],
    shell:
        "bwa mem -t {threads} {params.db_path} {input.fasta} 2> {log}  > {output}"

rule index_bwadb:
    """ prepare DB for mapping with BWA

    This only works if db and fasta file names conform to the expectations of
    the py-metagenomics databases:

    fasta: XXX.fasta 
    bwadb: XXX.fasta.bwa/bwadb
    """
    input: "{file_root}.{fasta_ext}"
    output: "{file_root}.{fasta_ext}.bwa/bwadb.bwt"
    wildcard_constraints:
        fasta_ext='(ffn|fna|fasta|fa)'
    log:
        "logs/bwadb.{file_root}.{fasta_ext}.bwa.index.log"
    benchmark:
        "benchmarks/bwadb.{file_root}.{fasta_ext}.bwa.index.time"
    version: BWA_VERSION
    params:
        db="{file_root}.{fasta_ext}.bwa/bwadb"
    shell:
        "bwa index -p {params.db} {input} > {log} 2>&1 "
