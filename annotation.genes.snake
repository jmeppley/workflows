"""
Python Makefile to annotate a set of amino acid seqs
  using RefSeq, KEGG, PFAM, and others to annotate them
Annotations are generated as tables of gene_family counts 
  groupbed by taxonomic clade

To tun on multiple files you can use annotation.reads.snake, but that does not
support multiplying bay a coverage file. If you need to adjust for coverage
over multiple samples, you'll need to run this in a bash loop for each sample.

To run:

snakemake -s /path/to/workflows/annotate.genes.snake --configfile annotate.genes.yaml [OPTIONS]

The following conda packages are necessary:
conda create -n snakemake -c bioconda python=3 snakemake samtools last hmmer
emboss

You will need to run the makefiles in py-metagenomics/databases or provide your own sequence dbs.

With a config file that looks like this:
genes_file: /path/to/genes.faa
annot_prefix: genes
clade_rank: order
output_style: long
threads:
    hmmer:    2
    lastal:   10
    prodigal: 50
dbs:
    RefSeq:
        path: "/projectb/scratch/jmeppley/seqdbs/RefSeq/78/RefSeq-78.           AllProteins.faa.ldb/lastdb"
        type: lastdb
        istaxdb: True
    KEGG:
        path: "/projectb/scratch/jmeppley/seqdbs/KEGG/KeggGene.pep.20160919/    lastdb"
        type: lastdb
    PFAM:
        path: "/projectb/scratch/jmeppley/seqdbs/PFAM/30.0/frag-20/Pfam-A.{N:   02d}.hmm"
        frags: 20
    COG:
        path: "/projectb/scratch/jmeppley/seqdbs/cdd/16_January_2015/COG/frag-  10/COG.hmm.{N:02d}.ascii"
        frags: 10
    TIGR:
        path: "/projectb/scratch/jmeppley/seqdbs/TIGRFAM/15.0/frag-10/TIGRFAMS. {N:02d}.hmm"
        frags: 10

The genes are expected to be in faa format.
"""

import yaml
import os
from python.common import get_version
from python.annotate import get_db_dot_fmt_strings

#########
# CONFIGURATION
#
# defaults for basic operation
# ranks to collect taxa on (defaults to order)
config.setdefault('clade_ranks', ['order'])

# read file names for start of workflow
prefix = config.setdefault('annot_prefix', 'genes')
genes_file = config.setdefault('genes_file', '{prefix}.fasta'.format(**vars()))
transitions = config.setdefault('transitions',{})

# If the starting file doesn't fit our naming scheme,
#  call for a symbolic link to be made (using transitions dict)
extension = 'faa'
annot_start_file = "{prefix}.{extension}".format(**vars())
if genes_file != annot_start_file:
    transitions[annot_start_file] = genes_file

# multiply counts by coverage values, if supplied
local_coverage_file = '{}.coverage.tsv'.format(prefix)
if 'coverage_file' in config or os.path.exists(local_coverage_file):
    coverage_file = config.get('coverage_file', local_coverage_file)
    if coverage_file != local_coverage_file:
        transitions[local_coverage_file] = coverage_file
else:
    include: 'annotation/dummy.coverage.snake'

include: "common/stats.snake"
include: "common/transitions.snake"
include: "annotation/common.genes.snake"

# how to search against taxdb
config['taxdbfmt'] = config['dbs'][config['taxdb']].get('format','lastx')

# End configuration
##########

# set up list of files to create
#  - The final tabulations
#  - Stats and histrogram files for genes
gene_family_db_dot_fmts = get_db_dot_fmt_strings(gene_family_dbs, config, 'faa')
annotation_file_list = \
                expand("{prefix}.annot.{taxdb}.{taxdbfmt}.{clade_rank}.vs.{db_dot_fmt}.tsv",
                       prefix=prefix,
                       taxdbfmt=config['taxdbfmt'],
                       taxdb=config['taxdb'],
                       clade_rank=config['clade_ranks'],
                       db_dot_fmt=gene_family_db_dot_fmts,) + \
                expand("stats/{prefix}.{suffix}.{ext}", 
                       ext=['stats','hist'],
                       suffix='faa',
                       prefix=prefix)

logger.debug("Snakefile config:\n" + yaml.dump(config))


##########
# RULES:
#  This lays out the dependencies and logic of the workflow
#  After the "all" target, it is generally laid out start to finish
rule gene_annotation_all:
    input:
        annotation_file_list
