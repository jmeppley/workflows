"""
Python Makefile to process multiple samples via megahit and AnVio per:
http://merenlab.org/2016/06/22/anvio-tutorial-v2/

To run:

snakemake -s /path/to/workflows/anvio.metagenomic.snake --configfile anvio.metagenomic.yaml [OPTIONS]

The following conda packages will install everything you need:
conda create -n snakemake -c bioconda python=3 snakemake pandas biopython bbmap
bfc megahit bwa samtools prinseq seqtk

NOTES for OSX:
 * megahit is not (yet) in conda, you will have to install it manually
 * add "sed" to the list of conda packages to install
   (the default sed on OSX has a different syntax)

Anvio must be installed in the runing environmetn or in a conda environment. If it is installed in a conda environment, set the config variable anvio_env to te name of that environment.

Make sure you run `anvi-setup-ncbi-cogs` once in your anvio environment.

With a config file like this to run megahit on a set of fastq reads files:
sample_data:
    sample1:
        raw: 
         - ../data/sample1/reads.R1.fastq
         - ../data/sample1/reads.R2.fastq
    reads_patterns:
         - glob: "../data/*.fastq"
           re: "/([^_]+)_[^/]+\.fastq"
           cleaned: False
    name: all
    metadata: samples.all.tsv
megahit:
    preset: meta
    threads: 40
bwa:
    threads: 20
centrifuge:
    path: /path/to/centrifuge
    db: dbs/p+h+v
anvio_env: anvio

The fields in sample_data are one of:
 a sample name (with locatioons of clean or raw read fasta files)
 name: a string to name files created from this group of samples
 metadata: a tabular file of sample data (optional)
 reads_patterns: a list of dicts dewscribing how to find and name a set of
                 files

The fields in reads_patterns elements are:
 glob: a path wildcard that will match all the fastq files you want to include
 re: a regular expression pattern that will pull the sample name from each fasta file
 cleaned: Set to true to skip QC

To skip assembly, specify a contigs file against which to compare reads:
contigs_fasta: /path/to/contigs.fasta

"""
from python.common import get_version
from snakemake.logging import logger
from python.qc import setup_qc_outputs
import yaml

######################
# Configuration
#
# Initialize transitions and outputs
transitions = config.setdefault('transitions',{})
outputs = config.setdefault('outputs',set())

# add pymg to path
include: "common/tool.path.snake"

## Bring in components
# generate stats from fastx files
include: "common/stats.snake"

## set up any QC
# use the assembly cleaning protocol
config.setdefault('cleaning_protocol', 'assembly')
# don't separate rRNA
config.setdefault('remove_rna', False)
# process the config
cleaned_reads = setup_qc_outputs(config)
#outputs.update(cleaned_reads)
# import needed QC rules
include: "qc/setup.snake"

# if contigs_fasta is set use it
run_assembly = 'contigs_fasta' not in config
if run_assembly:
    include: "assembly/metagenomic.megahit.snake"
    # output of megahit becomes start of anvio workflow
    transitions['contigs.raw.fasta'] \
                    = "megahit-{params}/megahit.contigs.fa" \
                                .format(params=config['megahit']\
                                                .get('preset','meta-sensitive'))
else:
    # work from existing contigs
    if config['contigs_fasta'] == 'contigs.fasta':
        raise Exception("The file contigs.fasta will be created from the raw contigs you supply. Please rename your starting contigs to something else. We suggest 'contigs.raw.fasta'")
    if config['contigs_fasta'] != 'contigs.raw.fasta':
        transitions['contigs.raw.fasta'] = config['contigs_fasta']
#
# generate simple statistics (prinseq) and histogram from contigs
for ext in ['stats', 'hist']:
    for file_name in ['contigs.fasta', 'anvio/contigs.fa']:
        outputs.add(".".join((os.path.join('stats',file_name), ext)))

# this prevents errors due to bad conda env switching
include: "common/conda.env.hack.snake"
#
# End Configuration
######################

# the samples snakefile will pull in profiles and contigs
include: "anvio/anvio.samples.snake"
include: "common/transitions.snake"

logger.debug("Snakefile config:\n" + yaml.dump(config))

######################
# Rules
rule anvio_all:
    input: outputs

logger.debug("Rules:\n" + "\n".join(r for r in dir(rules) if r[0]!="_"))
