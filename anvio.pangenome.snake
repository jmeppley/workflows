"""
Collect genomes into a database in prep for Anvi'o PAngenome mode
"""

####
# set up
from python.common import get_version
from snakemake.logging import logger
import yaml

# set up transition to pull in external files
pangenome_dependencies = []
for genome in config['genomes']:
    contigs = config['genomes'][genome]['contigs']
    if isinstance(contigs, str):
        if re.search(r'\.f(ast)?q\.gz$', contigs):
            include: "common/gunzip.snake"
            include: "common/fastq.snake"
            local_file = "contigs-{name}.raw.fastq.gz".format(name=genome)
            db_file = 'anvio/contigs-{name}.db'.format(name=genome)
        elif re.search(r'\.gz$', contigs):
            include: "common/gunzip.snake"
            local_file = "contigs-{name}.raw.fasta.gz".format(name=genome)
            db_file = 'anvio/contigs-{name}.db'.format(name=genome)
        elif re.search(r'\.f(ast)?q$', contigs):
            include: "common/fastq.snake"
            local_file = "contigs-{name}.fastq".format(name=genome)
            db_file = 'anvio/contigs-{name}.db'.format(name=genome)
        elif re.search(r'\.db$', contigs):
            local_file = "contigs-{name}.db".format(name=genome)
            db_file = local_file
        else:
            local_file = "contigs-{name}.raw.fasta".format(name=genome)
            db_file = 'anvio/contigs-{name}.db'.format(name=genome)
        # configure sym link from contigs file to file in ./
        config.setdefault('transitions',{})[local_file] = contigs
        # Save compiled contig db location
        config['genomes'][genome]['contigsdb'] = db_file
        # make sure we wait for hmms and cogs (if configured) to be run
        pangenome_dependencies.append(
            'anvio/status/contigs-{name}-{suf}'.format(name=genome,
                                                       suf='hmms'))
        if config.get('run_cogs', True) in ['True', True]:
            pangenome_dependencies.append(
                'anvio/status/contigs-{name}-{suf}'.format(name=genome,
                                                           suf='cogs'))

    else:
        # Assume this entry is info for internal metagenome
        raise Exception("internal metagenomes from config are not yet"
                        "supported")

# intermediate file names
external_genomes_table = "anvio/{pangenome_name}-GENOMES.tab"
genomes_tables = [external_genomes_table]
if 'internal_genomes_table' in config:
    genomes_tables.append(config['internal_genomes_table'])

# final output
config.setdefault('outputs', set()).add('anvio/status/pangenome-' + \
                                        config['pangenome_name'])

include: "anvio/anvio.contigs.snake"
include: "common/transitions.snake"
# this prevents errors due to bad conda env switching
include: "common/conda.env.hack.snake"

logger.debug("Snakefile config:\n" + yaml.dump(config))


#####
# Rules
rule outputs:
    input: config['outputs']
        
rule pangenome_files:
    input: "anvio/{pangenome_name}-GENOMES.h5"
    output: "anvio/status/pangenome-{pangenome_name}"
    log: "logs/pangenome-{pangenome_name}.log"
    benchmark: 'benchmarks/pangenome-{pangenome_name}.time'
    version: config['anvio_version']
    shell:
        """{config[anvio_prefix]}
           rm -rf anvio/{wildcards.pangenome_name} {wildcards.pangenome_name}
           anvi-pan-genome -g {input} \
            --project-name {wildcards.pangenome_name} \
            > {log} 2>&1
           mv {wildcards.pangenome_name} anvio/
           touch {output}"""

rule pangenome_db:
    input: genomes_tables
    output: "anvio/{pangenome_name}-GENOMES.h5"
    log: "logs/pangenome-{pangenome_name}-table.log"
    benchmark: 'benchmarks/pangenome-{pangenome_name}-table.time'
    version: config['anvio_version']
    params:
        tables='-e ' + genomes_tables[0] \
                if len(genomes_tables) == 1
                else '-e ' + genomes_tables[0] + ' -i ' + genomes_tables[1]
    shell:
        """{config[anvio_prefix]}
           rm -f {output}
           anvi-gen-genomes-storage -o {output} {params.tables} \
            > {log} 2>&1
        """

rule pangenome_table:
    """ Create the text table needed by anvio pangenomic mode """
    input: pangenome_dependencies
    output: external_genomes_table
    run:
        with open(output[0], 'w') as OUTF:
            OUTF.write("name\tcontigs_db_path\n")
            for genome in config['genomes']:
                OUTF.write("{name}\t../{db}\n".format(
                        name=genome,
                        db=config['genomes'][genome]['contigsdb']))

ruleorder: pangenome_files > uncompress_file
