"""
Workflow for assembling transcriptomic samples

 * renames reads to sample names
 * optionally cleans with:
   - bbduk (adapters)
   - bfc (error correction)
   - trimmomatic (quality and length)
 * runs assembler (SPAdes only, for now)
 * renames transcripts
    (to config[assembly_name], if given)
    (to sample name, if only one)
 * separates into rRNA and transcripts

####
# Required conda packages:
#
# snakemake bbmap infernal spades prodigal pandas biopython bfc (optional)
###

see test/data/configs/spades.yaml for an example configuration

"""
import os, re, sys, glob, yaml, pandas, subprocess, tempfile, numpy
from Bio import SeqIO, __version__ as BIOPYTHON_VERSION
from python.common import get_version, parse_stats, get_file_name
from python.qc import setup_qc_outputs

# Initialize transitions
config.setdefault('transitions', {})

##
# Bring in components
include: "common/stats.snake"
#
## set up any QC
# don't separate rRNA in reads before assembly
config.setdefault('produce_bam', False)
config.setdefault('produce_nonrrna_reads', False)
if config.setdefault('remove_rna', False) or \
    config.get('produce_nonrrna_reads', False):
    # if user requests separation do it after
    config['remove_rna'] = False
    config['produce_bam'] = True
    config['produce_nonrrna_reads'] = True

# use the assembly cleaning protocol
config.setdefault('cleaning_protocol', 'assembly')
outputs = config.setdefault('outputs',set())
cleaned_reads = setup_qc_outputs(config)
#outputs.update(cleaned_reads)
include: "qc/setup.snake"
#
# the assembler (add link from assembled contigs to ./contigs.raw.fasta)
assembler = config.get('assembler', 'spades')
if assembler == 'spades':
    include: "assembly/metagenomic.spades.snake"
    config['transitions']['contigs.raw.fasta'] = 'spades/transcripts.fasta'
elif assembler == 'megahit':
    raise Excption("Unsupported RNA assembler: " + config['assembler'])
else:
    raise Excption("Unknown assembler: " + config['assembler'])
#
# Did they ask for non rRNA reads?
#  TODO: use contig annotations to speed this up
if config['produce_nonrrna_reads']:
    for stats_file in expand("stats/{sample}.raw.non-rRNA.fastq.{extension}",
                             extension=['stats', 'hist'],
                             sample=config['sample_data'],):
        outputs.add(stats_file)
#
# separate rRNA from transcripts at end
include: "qc/sort.rna.snake"
for seqtype in ['non-rRNA', 'rRNA-only']:
    for extension in ['stats', 'hist']:
        outputs.add('stats/contigs.all.{}.fasta.{}'.format(seqtype, extension))
#
# contig annotation (RNA, genes, coverage, stats)
transcript_mapper = config.setdefault('transcript_mapper','kallisto')
if transcript_mapper == 'salmon':
    include: "annotation/salmon.snake"
elif transcript_mapper == 'kallisto':
    include: "annotation/kallisto.snake"
elif transcript_mapper == 'bwa':
    include: "common/mapping_bwa.snake"
else:
    raise Exception("Unknown transcript mapping tool: {}! Please check your configuration.".format(transcript_mapper))

config['is_transcriptomic'] = True
contig_coverage_files = \
    {s:'contigs.all.coverages.{sample}.tsv'.format(sample=s) \
     for s in config['sample_data'] \
     if 'clean' in config['sample_data'][s]}
include: "assembly/rrna.annotation.snake"

# run prodigal
if config.get('predict_genes', False):
    include: "assembly/contig.genes.snake"
    outputs.add('stats/contigs.all.annotations.faa.stats')
    outputs.add('stats/contigs.all.annotations.faa.hist')

# rule to create links
include: "common/transitions.snake"

# make sure tanstion source files don't get deleted
from snakemake.io import flag
for file_name in list(config['outputs']) + list(config['transitions'].values()):
    flag(file_name, "temp", False)

# 
# Make sure assembly has name
if 'assembly_name' not in config:
    # if there is only one sample, use that
    sample_names = [sample \
                         for sample,data in config['sample_data'].items() \
                         if 'clean' in data]
    if len(sample_names)==1:
        config['assembly_name'] = sample_names[0]
    else:
        raise Exception("Please supply a naming string for this assembly "
                        "in config[assembly_name].")
config['outputs'].add("assembly.{assembly_name}.report".format(**config))

logger.debug("Snakefile config:\n" + yaml.dump(config))

############
# RULES
#
# Start with the final product(s):
rule all:
    input:
        config['outputs'],

rule contigs_fasta:
    """
    Rename contigs
    """
    input:
        "contigs.raw.fasta"
    output:
        "contigs.all.fasta"
    log:
        "logs/contigs.all.fasta.link.log"
    benchmark:
        "benchmarks/contigs.all.fasta.txt"
    version:
        "biopython-{}".format(BIOPYTHON_VERSION)
    run:
        root_name = config['assembly_name']
        with open(input[0]) as INPUT:
            with open(output[0], 'w') as OUTPUT:
                for i, (title, sequence) \
                    in enumerate(SeqIO.FastaIO.SimpleFastaParser(INPUT)):
                        contig_name = "%s_c%d" % (root_name, i+1)
                        OUTPUT.write(">%s %s\n%s\n" % (contig_name,
                                                       title,
                                                       sequence))


if config.get('produce_nonrrna_reads', False):
    rule get_raw_non_rrna_reads:
        """
        Pull non-rRNA reads out of raw fastq file using mapping results
        
        Must reference contig names to list of rRNA contigs.
        """
        input:
            reads="{sample}.renamed.interleaved.fastq",
            hits="mapping/{sample}.reads.vs.contigs.all.bam",
            rrna_contigs_list="contigs.all.rRNA-only.fasta.ids"
        output:
            "{sample}.raw.non-rRNA.fastq"
        benchmark:
            "benchmarks/{sample}.remove_rrna.time"
        log:
            "logs/{sample}.remove_rrna.log"
        version:
            get_version("screen_list.py")
        shell:
            "screen_list.py \
             -l <(samtools view {input.hits} | cut -f 1,3 \
                  | screen_table.py -l {input.rrna_contigs_list} -k -c 1) \
             -C 0 -f fastq -v {input.reads}  > {output} 2> {log}"

    rule get_contig_ids:
        input: "{contigs}.fasta"
        output: "{contigs}.fasta.ids"
        shell: r"""
            grep "^>" {input} | perl -pe  's/^>(\S+).*/\1/' > {output}
               """

def get_read_files(reads_types, config, return_sample=False):
    """
    code to get all the reads files for all samples

    This is needed so the final report can indicate how many reads went into
    the assembly.
    """
    # support either list of types or single type string (usu clean or raw)
    if isinstance(reads_types, str):
        reads_types = [reads_types,]

    for sample, sample_data in config['sample_data'].items():
        # only process types that exist in data for this sample
        for reads_type in set(reads_types).intersection(sample_data.keys()):
            reads_files = sample_data[reads_type]
            if isinstance(reads_files, str):
                if return_sample:
                    yield(sample, reads_files)
                else:
                    yield reads_files
            else:
                for reads_file in reads_files:
                    if return_sample:
                        yield(sample, reads_file)
                    else:
                        yield reads_file

def get_stats_file(fasta_file):
    return "stats/{}.stats".format(fasta_file)

rule final_report:
    input:
        read_stats=[get_stats_file(read_file) \
                    for read_file in get_read_files(['raw','clean'], config)],
        ssu_rrnas="contigs.all.vs.rRNA.cmsearch.SSU.gt{length}.tsv"\
                            .format(length=config.get('long_ssu_length',1200)),
        lsu_rrnas="contigs.all.vs.rRNA.cmsearch.LSU.gt{length}.tsv"\
                            .format(length=config.get('long_lsu_length',2000)),
        contig_coverages=expand("contigs.all.coverages.{sample}.tsv",
                                sample=config['sample_data']),
        rrna_contigs='contigs.all.rRNA-only.fasta',
        contig_stats="stats/contigs.all.fasta.stats",
        genes='stats/contigs.all.annotations.faa.stats' \
            if config.get('predict_genes', False) else []
    output: "assembly.{assembly_name}.report"
    run:
        read_stats={}

        # paired reads
        for reads_type in ['raw', 'clean']:
            for sample, read_file in get_read_files([reads_type,],
                                                    config,
                                                    return_sample=True):
                stats_file = get_stats_file(read_file)
                stats = parse_stats(stats_file)
                match = re.search(r'R[12]', stats_file)
                if match:
                    key_pref = sample + " " + reads_type + " " + match.group()
                else:
                    key_pref = sample + " " + reads_type
        
                for stat_type in ['reads', 'bases']:
                    stat_key = ' '.join((key_pref, stat_type))
                    read_stats[stat_key] = read_stats.get(stat_key, 0) \
                                            + stats[stat_type]

        # mapping
        rrna_contigs = [r.id for r in \
            SeqIO.parse(get_file_name(input.rrna_contigs), 'fasta')]
        read_counts = pandas.read_table(get_file_name(input.contig_coverages),
                                        index_col=0,
                                        usecols=[config['contig_col'],
                                                 config['read_col']])
        mapped_reads = read_counts.sum()[config['read_col']]
        rrna_mapped_reads = \
            read_counts.loc[rrna_contigs,].sum()[config['read_col']]
        
        mapped_reads, rrna_mapped_reads = \
            [float(n) for n in numpy.around((mapped_reads,
                                            rrna_mapped_reads),
                                           2)]
        mapping_stats = {'mapped': mapped_reads,
                         'mapped_to_rrna_contigs': rrna_mapped_reads,
                         'mapped_to_other_contigs': \
                            mapped_reads - rrna_mapped_reads,
                        }

        # contigs
        contig_stats={}
        stats = parse_stats(get_file_name(input.contig_stats))
        contig_stats['contigs'] = stats['reads']
        contig_stats['contig bases'] = stats['bases']
        contig_stats['contigs_w_rrna'] = len(rrna_contigs)

        # count genes and gene containing contigs
        if config.get('predict_genes', False):
            stats = parse_stats(get_file_name(input.genes))
            contig_stats['gene_count'] = stats['reads']
            contig_stats['gene_bases'] = stats['bases']

        # full length SSUs
        ssu_count=-1
        with open(get_file_name(input.ssu_rrnas)) as INF:
            for line in INF:
                ssu_count+=1
        contig_stats['SSUs']=ssu_count

        # full length LSUs
        lsu_count=-1
        with open(get_file_name(input.lsu_rrnas)) as INF:
            for line in INF:
                lsu_count+=1
        contig_stats['LSUs']=lsu_count

        report={"reads":read_stats,
                "assembly":contig_stats,
                "mapping":mapping_stats,
                "assembly_name":wildcards.assembly_name}
        with open(output[0],'w') as OUTF:
            OUTF.write(yaml.dump(report, default_flow_style=False))

