include: 'bbduk.snake'
include: 'tmatic.snake'

from python.qc import dummy_join_fastq
from python.pandaseq import scan_pandaseq_log
from python.common import get_file_name

rule pandaseq:
    """ Joins paired illumina reads """
    input:
        fwd="{file_root}.R1.paired.noadaptp.fastq",
        rev="{file_root}.R2.paired.noadaptp.fastq",
    output:
        fastq="{file_root}.paired.assembled.fastq",
        log="{file_root}.paired.pandaseq_join.log",
    benchmark:
        "benchmarks/{file_root}.pandaseq.time"
    version:
        get_version('pandaseq',"-v")
    params:
        threshold=config.get('pandaseq', {}).get('threshold','.32')
    shell:
        """
        pandaseq -f {input.fwd} -r {input.rev} -d rBfkmS \
        -t {params.threshold} -F > {output.fastq} 2> {output.log} || true
        # some checks
        FMLS=`egrep -c "FML" {output.log} || :` || true
        FML_READS=`egrep "FML" {output.log} | cut -f 4 | uniq | grep -c . || :` || true 
        if [ "$FMLS" -gt 0 ]; then
            echo "WARNING: $FMLS redundant kmers in $FML_READS reads!" \
             > {output.fastq}.FML.warning
        fi
        ERRS=`egrep -c "^(ERR|bad) " {output.log} || :` || true
        if [ "$ERRS" -gt 0 ]; then 
            echo "found $ERRS error messages in pandaseq log!"
            exit 2; 
        fi
        """

#old code to check pandaseq output

#rule panads_unpaired_list:
#    input: 
#        pandaseq_log="{file_root}.paired.pandaseq_join.log",
#    output:
#        "{file_root}.paired.unassembled.list"
#    log:
#        "logs/{file_root}.paired.unassembled.list.log"
#    benchmark:
#        "benchmarks/{file_root}.paired.unassembled.list.time"
#    run:
#        with open(log[0], 'w') as LOG:
#            unpaired, counts = scan_pandaseq_log(input.pandaseq_log, LOG)
#        with optn(output[0], 'w') as OUTF:
#            for seqid in unpaired:
#                OUTF.write(seqid)
#                OUTF.write("\n")


rule pandas_unpaired_reads:
    input:
        reads="{file_root}.{dir}.paired.fastq",
        list="{file_root}.paired.unassembled.list"
    output:
        "{file_root}.paired.unassembled.{dir}.fastq",
    wildcard_constraints:
        dir=r'R[12]'
    shell:
        "screen_list.py -l {input.list} {input.reads} -k -o {output}"

rule dummy_join:
    """ Joins unjoined illumina read pairs """
    input:
        fwd="{file_root}.R1.paired.trimmed.fastq",
        rev="{file_root}.R2.paired.trimmed.fastq",
        pandaseq_log="{file_root}.paired.pandaseq_join.log",
        #fwd="{file_root}.paired.unassembled.R1.trimmed.fastq",
        #rev="{file_root}.paired.unassembled.R2.trimmed.fastq",
    output:
        "{file_root}.paired.trimmed.dummy.fastq"
    log:
        "logs/{file_root}.pandaseq_dummy.log"
    benchmark:
        "benchmarks/{file_root}.pandaseq_dummy.time"
    run:
        #dummy_join_fastq(input, output, log)
        with open(log[0], 'w') as LOG:
            unpaired, counts = \
                scan_pandaseq_log(get_file_name(input.pandaseq_log), LOG)
        dummy_join_fastq(input, output, log, 
                         record_id_filter = unpaired)

rule merge_panda:
    """ merges pandaseq joins and dummy joins (after some end-trimming) """
    input:
        pandaseq="{file_root}.paired.assembled.trimmed.fastq",
        dummy="{file_root}.paired.trimmed.dummy.fastq",
        singles="{file_root}.solo.paired.noadaptp.trimmed.fastq",
        unpaired1="{file_root}.R1.unpaired.trimmed.fastq",
        unpaired2="{file_root}.R2.unpaired.trimmed.fastq",
    output:
        merged="{file_root}.joined.fastq"
    log:
        "logs/{file_root}.joined.log"
    benchmark:
        "benchmarks/{file_root}.joined.time"
    shell:
        "cat {input} > {output}"

