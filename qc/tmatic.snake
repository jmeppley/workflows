from python import tmatic
from python.common import apply_defaults

# some reasonable defaults
defaults = {
    'trimmomatic': {
        'threads': 20,
        'illumina_clip': "2:30:10",
        'minlen': 50,
    }}
apply_defaults(config, defaults)

# get the version once and use in all rules
tmatic_version = get_version('trimmomatic','-version')

wildcard_constraints:
    chemistry=r'(truseq|scripseq|nextera)',
    barcode=r'[ACTGN]+(\.[ACTGN]+)?',

rule trimmomatic_trim:
    """Trims given paired-end reads with given parameters"""
    input:
        "{file_root}.fastq"
    output:
        "{file_root}.trimmed.fastq"
    log:
        "logs/{file_root}_trimmomatic_trim.log"
    benchmark:
        "benchmarks/{file_root}_trimmomatic_trim.time"
    threads:
        config['trimmomatic']['threads']
    version:
        tmatic_version
    params:
        trim_params=" ".join([
            "{}:{}".format(p.upper(),config['trimmomatic'][p]) \
            for p in ['leading', 'trailing', 'slidingwindow', 'minlen'] \
            if p in config['trimmomatic']
        ])
        #trim_params="LEADING:{leading} TRAILING:{trailing} \
        #   SLIDINGWINDOW:{sliding_window} MINLEN:{minlen}")
    shell:
        # if input is zero lenght, just touch output
        """
        if [ -s {input} ]; then
            trimmomatic SE -threads {threads} {input} {output} \
                {params.trim_params} > {log} 2>&1
        else
            touch {output}
        fi
        """
    

rule trimmomatic_adapters:
    """
    Generates fasta file with adapters for trimming
    """
    output:
        "adapters/{chemistry}_{barcode}_adapters.fa"
    log:
        "logs/{chemistry}_{barcode}_adapters.fa.log"
    benchmark:
        "benchmarks/adapters/{chemistry}_{barcode}.time"
    run:
        primer_template = tmatic.get_primer_template(wildcards.chemistry)
        barcode_data = tmatic.process_barcode_string(wildcards.barcode)
        with open(output[0], 'w') as OUTF:
            OUTF.write(primer_template.format(**barcode_data))


rule trimmomatic_clean_adapters:
    """Removes adapters from given paired-end reads with given parameters"""
    input:
        fwd="{prefix}.R1.fastq",
        rev="{prefix}.R2.fastq",
        primers="adapters/{chemistry}_{barcode}_adapters.fa"
    output:
        "{prefix}.{chemistry}.{barcode}.trim_adapt.R1.paired.fastq",
        "{prefix}.{chemistry}.{barcode}.trim_adapt.R2.paired.fastq",
        "{prefix}.{chemistry}.{barcode}.trim_adapt.R1.unpaired.fastq",
        "{prefix}.{chemistry}.{barcode}.trim_adapt.R2.unpaired.fastq",
    log:
        "logs/{prefix}_{chemistry}.{barcode}.trim_adapt.log"
    benchmark:
        "benchmarks/{prefix}_{chemistry}.{barcode}.trim_adapt.time"
    threads:
        config['trimmomatic']['threads']
    version:
        tmatic_version
    shell:
        """
        trimmomatic PE -threads {threads} \
         {input.fwd} {input.rev} \
         {output[0]} {output[2]} {output[1]} {output[3]} \
         ILLUMINACLIP:{input.primers}:{config[trimmomatic][illumina_clip]} \
         > {log} 2>&1
        """

rule trimomatic_recombine:
    input:
        "{prefix}.trim_adapt.{dir}.paired.fastq",
        "{prefix}.trim_adapt.{dir}.unpaired.fastq"
    output: "{prefix}.trim_adapt.{dir}.fastq"
    wildcard_constraints:
        prefix=r'.+(?<!paired)',
        dir=r'R[12]',
    shell: "cat {input} > {output}"

