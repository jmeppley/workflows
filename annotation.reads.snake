"""
Python Makefile to pull out reads from a BAM alignment 
  and use RefSeq, KEGG, PFAM, and others to annotate them
Annotations are generated as tables of gene_family counts 
  groupbed by taxonomic clade

To run:

snakemake -s /path/to/workflows/annotate.reads.snake --configfile annotate.reads.yaml [OPTIONS]

See test/conda/annotate.yml for a list of rquired packages. You can create a conda environment with the command:
conda env create -n annotate -f test/conda/annotate.yml

You will need to run the makefiles in tools/pymg/databases two download and format the 
reference databases if your lab doesn't already have them.

With a config file that looks like test/data/configs/reads.annot.prod/yml or reads.annot.six.yml.
Or like this:
reads_file: /path/to/file.bam
annot_prefix: reads
clade_rank: order
output_style: long
threads:
    hmmer:    2
    lastal:   10
    prodigal: 50
aa_conversion: prodigal
dbs:
    RefSeq:
        path: "/seqdbs/RefSeq/78/RefSeq-78.AllProteins.faa.ldb/lastdb"
        format: lastp
        type: tax
    KEGG:
        path: "/seqdbs/KEGG/KeggGene.pep.20160919/lastdb"
        format: lastp
    PFAM:
        path: "/projectb/scratch/jmeppley/seqdbs/PFAM/30.0/frag-20/Pfam-A.{N:02d}.hmm"
        frags: 20
    COG:
        path: "/projectb/scratch/jmeppley/seqdbs/cdd/16_January_2015/COG/frag-10/COG.hmm.{N:02d}.ascii"
        frags: 10

The reads can be embedded in a bam file or given as fasta or fastq.
"""

import yaml
import os
from python.common import get_version
from python.annotate import get_db_dot_fmt_strings, get_last_alg

#########
# CONFIGURATION
#
# defaults for basic operation
# ranks to collect taxa on (defaults to order)
config.setdefault('clade_ranks', ['order'])
#
# read file names for start of workflow
prefix = config.setdefault('annot_prefix', 'reads')
reads_file = config.setdefault('reads_file', '{prefix}.fasta'.format(**vars()))
transitions = config.setdefault('transitions',{})
#
# If the starting file doesn't fit our naming scheme,
#  call for a symbolic link to be made (using transitions dict)
extension = re.search(r'\.([a-z0-1A-Z]+)$', reads_file).group(1)
if extension in ['fna', 'ffn', 'fa', 'fasta']:
    extension = 'fasta'
if extension in ['fasta', 'fastq', 'bam']:
    if extension == 'fastq':
        include: "common/fastq.snake"
    annot_start_file = "{prefix}.{extension}".format(**vars())
    if reads_file != annot_start_file:
        transitions[annot_start_file] = reads_file
else:
    raise Exception("Initial file must be bam or fasta! I don't know what to do "
            "with {reads_file}".format(**vars()))
#
# add my tools to the path (Somewhat of a hack, maybe I'll get my stuff in
# conda eventually)
include: "common/tool.path.snake"
#
# End configuration
##########

include: "common/stats.snake"
include: "common/transitions.snake"
aa_conversion = config.get('aa_conversion', 'sixframe')
if aa_conversion == 'prodigal':
    include: "annotation/common.prodigal.snake"
    converted_suffix = "pred.genes.faa"
    fastq_query_extension='faa'
else:
    include: "annotation/common.sixframe.snake"
    converted_suffix = "sixframe.faa"
    fastq_query_extension='fasta'

if extension == 'fastq' and aa_conversion != 'prodigal':
    ruleorder: remove_colons > fastq_to_fasta
if extension == 'bam' and aa_conversion == 'prodigal':
    ruleorder: predict_genes_prodigal > extract_reads

if config.get('remove_rna',True) in ['True', True]:
    include: "qc/sort.rna.snake"
    rna_step = 'non-rRNA.'
    if extension == 'fastq':
        ruleorder: filter_nonrrna_or_rrna > fastq_to_fasta
else:
    rna_step = ''

# how to search against taxdb
config['taxalg'] = get_last_alg(config['dbs'][config['taxdb']]\
                                                .get('format','lastp'),
                                fastq_query_extension)

# set up list of files to create
#  - The final tabulations
#  - Stats and histrogram files for reads and translated seqs
gene_family_db_dot_fmts = get_db_dot_fmt_strings(gene_family_dbs,
                                                 config,
                                                 fastq_query_extension)
annotation_file_list = \
            expand("{prefix}.{rna_step}annot.{taxdb}.{taxalg}.{clade_rank}.vs.{db_dot_fmt}.tsv",
                   prefix=prefix,
                   taxalg=config['taxalg'],
                   rna_step=rna_step,
                   taxdb=config['taxdb'],
                   clade_rank=config['clade_ranks'],
                   db_dot_fmt=gene_family_db_dot_fmts,) + \
            expand("stats/{prefix}.{rna_step}{suffix}.{ext}", 
                   ext=['stats','hist'],
                   suffix=['fasta', converted_suffix],
                   rna_step=rna_step,
                   prefix=prefix)

logger.debug("Snakefile config:\n" + yaml.dump(config))
logger.debug(repr(annotation_file_list))

##########
# RULES:
#  This lays out the dependencies and logic of the workflow
#  After the "all" target, it is generally laid out start to finish
rule read_annotation_all:
    input:
        annotation_file_list

if extension == 'bam':
    rule extract_reads:
        """
        Pull reads out of BAM file
        """
        input:
            "{prefix}.bam"
        output:
            temp("{prefix}.fasta")
        benchmark:
            "benchmarks/{prefix}_extract_reads.time"
        log:
            "logs/{prefix}_extract_reads.log"
        version:
            get_version('samtools', lines=[0,])
        shell:
            "samtools fasta -0 {output} {input} > {log} 2>&1"

